
simpleserial-base-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00802000  00001466  000014fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008021aa  008021aa  000016a4  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000208  00000000  00000000  000016f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000044ac  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00002aae  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00002466  00000000  00000000  0000885a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000474  00000000  00000000  0000acc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000020a2  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00001869  00000000  00000000  0000d1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000150  00000000  00000000  0000ea3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000002a  00000000  00000000  0000eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      6c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      70:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      74:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      7c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      80:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      84:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      8c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      90:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      94:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      98:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      9c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      ac:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      b0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      b4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      b8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      bc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      c0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      c4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      c8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      cc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      d0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      d4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      d8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      dc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      e0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      e4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      e8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      ec:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      f0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      f4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      f8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      fc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     100:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     104:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     108:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     10c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     110:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     114:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     118:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     11c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     120:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     124:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     128:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     12c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     130:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     134:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     138:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     13c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     140:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     144:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     148:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     14c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     150:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     154:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     158:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     15c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     160:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     164:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     168:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     16c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     170:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     174:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     178:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     17c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     180:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     184:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     188:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     18c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     190:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     194:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     198:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     19c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1ac:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1b0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1b4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1b8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1bc:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1c0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
     1c4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>

000001c8 <__trampolines_start>:
     1c8:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <ss_get_commands>
     1cc:	0c 94 11 01 	jmp	0x222	; 0x222 <get_key>
     1d0:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <ss_num_commands>
     1d4:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <get_pt>
     1d8:	0c 94 18 05 	jmp	0xa30	; 0xa30 <check_version>

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df e3       	ldi	r29, 0x3F	; 63
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	00 e0       	ldi	r16, 0x00	; 0
     1ea:	0c bf       	out	0x3c, r16	; 60

000001ec <__do_copy_data>:
     1ec:	11 e2       	ldi	r17, 0x21	; 33
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b0 e2       	ldi	r27, 0x20	; 32
     1f2:	e6 e6       	ldi	r30, 0x66	; 102
     1f4:	f4 e1       	ldi	r31, 0x14	; 20
     1f6:	00 e0       	ldi	r16, 0x00	; 0
     1f8:	0b bf       	out	0x3b, r16	; 59
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x14>
     1fc:	07 90       	elpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	aa 3a       	cpi	r26, 0xAA	; 170
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0x10>

00000206 <__do_clear_bss>:
     206:	22 e2       	ldi	r18, 0x22	; 34
     208:	aa ea       	ldi	r26, 0xAA	; 170
     20a:	b1 e2       	ldi	r27, 0x21	; 33
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a0 32       	cpi	r26, 0x20	; 32
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <main>
     21a:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <get_key>:
	free(p);
}
uint8_t get_key(uint8_t* k, uint8_t len)
{
	// Load key here
	for (uint8_t i=0;i<len;i++){
     222:	aa ea       	ldi	r26, 0xAA	; 170
     224:	b1 e2       	ldi	r27, 0x21	; 33
     226:	fc 01       	movw	r30, r24
     228:	9e 2f       	mov	r25, r30
     22a:	98 1b       	sub	r25, r24
     22c:	96 17       	cp	r25, r22
     22e:	10 f0       	brcs	.+4      	; 0x234 <get_key+0x12>
		key[i] = k[i] ;
	}
	return 0x00;
}
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
		key[i] = k[i] ;
     234:	91 91       	ld	r25, Z+
     236:	9d 93       	st	X+, r25
	for (uint8_t i=0;i<len;i++){
     238:	f7 cf       	rjmp	.-18     	; 0x228 <get_key+0x6>

0000023a <masked_sbox>:
	uint8_t masked_input = x^m1;
     23a:	86 27       	eor	r24, r22
	uint8_t masked_output = TBL_SBOX[masked_input];
     23c:	a8 2f       	mov	r26, r24
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	a6 5f       	subi	r26, 0xF6	; 246
     242:	bf 4d       	sbci	r27, 0xDF	; 223
	uint8_t m2 = TBL_SBOX[m1];
     244:	e6 2f       	mov	r30, r22
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	e6 5f       	subi	r30, 0xF6	; 246
     24a:	ff 4d       	sbci	r31, 0xDF	; 223
	uint8_t result = masked_output ^ m2;
     24c:	9c 91       	ld	r25, X
     24e:	80 81       	ld	r24, Z
}
     250:	89 27       	eor	r24, r25
     252:	08 95       	ret

00000254 <byte2word>:
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	fc 01       	movw	r30, r24
     25a:	eb 01       	movw	r28, r22
	*out = 0;
     25c:	18 82       	st	Y, r1
     25e:	19 82       	std	Y+1, r1	; 0x01
     260:	1a 82       	std	Y+2, r1	; 0x02
     262:	1b 82       	std	Y+3, r1	; 0x03
	*out = ((uint32_t)in[0] << (24) )^ (*out);
     264:	80 81       	ld	r24, Z
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b8 2f       	mov	r27, r24
     26e:	aa 27       	eor	r26, r26
     270:	99 27       	eor	r25, r25
     272:	88 27       	eor	r24, r24
     274:	88 83       	st	Y, r24
     276:	99 83       	std	Y+1, r25	; 0x01
     278:	aa 83       	std	Y+2, r26	; 0x02
     27a:	bb 83       	std	Y+3, r27	; 0x03
	*out = ((uint32_t)in[1] << (24 - 1 * 8)) ^ (*out);
     27c:	21 81       	ldd	r18, Z+1	; 0x01
     27e:	a2 2b       	or	r26, r18
     280:	88 83       	st	Y, r24
     282:	99 83       	std	Y+1, r25	; 0x01
     284:	aa 83       	std	Y+2, r26	; 0x02
     286:	bb 83       	std	Y+3, r27	; 0x03
	*out = ((uint32_t)in[2] << (24 - 2 * 8)) ^ (*out);
     288:	22 81       	ldd	r18, Z+2	; 0x02
     28a:	92 2b       	or	r25, r18
     28c:	88 83       	st	Y, r24
     28e:	99 83       	std	Y+1, r25	; 0x01
     290:	aa 83       	std	Y+2, r26	; 0x02
     292:	bb 83       	std	Y+3, r27	; 0x03
	*out = ((uint32_t)in[3] << (24 - 3 * 8)) ^ (*out);
     294:	23 81       	ldd	r18, Z+3	; 0x03
     296:	82 2b       	or	r24, r18
     298:	88 83       	st	Y, r24
     29a:	99 83       	std	Y+1, r25	; 0x01
     29c:	aa 83       	std	Y+2, r26	; 0x02
     29e:	bb 83       	std	Y+3, r27	; 0x03
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <word2byte>:
{
     2a6:	dc 01       	movw	r26, r24
     2a8:	fb 01       	movw	r30, r22
	*(out) = (*in) >> (24 );
     2aa:	13 96       	adiw	r26, 0x03	; 3
     2ac:	8c 91       	ld	r24, X
     2ae:	13 97       	sbiw	r26, 0x03	; 3
     2b0:	80 83       	st	Z, r24
	*(out + 1) = (*in) >> (24 -  8);
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	8c 91       	ld	r24, X
     2b6:	12 97       	sbiw	r26, 0x02	; 2
     2b8:	81 83       	std	Z+1, r24	; 0x01
	*(out + 2) = (*in) >> (24 - 2 * 8);
     2ba:	11 96       	adiw	r26, 0x01	; 1
     2bc:	8c 91       	ld	r24, X
     2be:	11 97       	sbiw	r26, 0x01	; 1
     2c0:	82 83       	std	Z+2, r24	; 0x02
	*(out + 3) = (*in) >> (24 - 3 * 8);
     2c2:	8c 91       	ld	r24, X
     2c4:	83 83       	std	Z+3, r24	; 0x03
}
     2c6:	08 95       	ret

000002c8 <move>:
{
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	fc 01       	movw	r30, r24
     2d6:	26 2f       	mov	r18, r22
	*data = (*data << length) ^ (*data >> (32 - length));
     2d8:	86 2f       	mov	r24, r22
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	40 81       	ld	r20, Z
     2de:	51 81       	ldd	r21, Z+1	; 0x01
     2e0:	62 81       	ldd	r22, Z+2	; 0x02
     2e2:	73 81       	ldd	r23, Z+3	; 0x03
     2e4:	6a 01       	movw	r12, r20
     2e6:	7b 01       	movw	r14, r22
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <move+0x2a>
     2ea:	cc 0c       	add	r12, r12
     2ec:	dd 1c       	adc	r13, r13
     2ee:	ee 1c       	adc	r14, r14
     2f0:	ff 1c       	adc	r15, r15
     2f2:	2a 95       	dec	r18
     2f4:	d2 f7       	brpl	.-12     	; 0x2ea <move+0x22>
     2f6:	97 01       	movw	r18, r14
     2f8:	86 01       	movw	r16, r12
     2fa:	91 95       	neg	r25
     2fc:	81 95       	neg	r24
     2fe:	91 09       	sbc	r25, r1
     300:	8f 71       	andi	r24, 0x1F	; 31
     302:	99 27       	eor	r25, r25
     304:	04 c0       	rjmp	.+8      	; 0x30e <move+0x46>
     306:	76 95       	lsr	r23
     308:	67 95       	ror	r22
     30a:	57 95       	ror	r21
     30c:	47 95       	ror	r20
     30e:	8a 95       	dec	r24
     310:	d2 f7       	brpl	.-12     	; 0x306 <move+0x3e>
     312:	4c 29       	or	r20, r12
     314:	51 2b       	or	r21, r17
     316:	6e 29       	or	r22, r14
     318:	73 2b       	or	r23, r19
     31a:	40 83       	st	Z, r20
     31c:	51 83       	std	Z+1, r21	; 0x01
     31e:	62 83       	std	Z+2, r22	; 0x02
     320:	73 83       	std	Z+3, r23	; 0x03
}
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <func_key>:
{
     330:	8f 92       	push	r8
     332:	9f 92       	push	r9
     334:	af 92       	push	r10
     336:	bf 92       	push	r11
     338:	cf 92       	push	r12
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	00 d0       	rcall	.+0      	; 0x34a <func_key+0x1a>
     34a:	0f 92       	push	r0
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	8c 01       	movw	r16, r24
	uint8_t temp[4] = { 0x00 };
     352:	19 82       	std	Y+1, r1	; 0x01
     354:	1a 82       	std	Y+2, r1	; 0x02
     356:	1b 82       	std	Y+3, r1	; 0x03
     358:	1c 82       	std	Y+4, r1	; 0x04
	word2byte(input, temp);
     35a:	be 01       	movw	r22, r28
     35c:	6f 5f       	subi	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
	*(temp) = TBL_SBOX[*(temp )];
     364:	e9 81       	ldd	r30, Y+1	; 0x01
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	e6 5f       	subi	r30, 0xF6	; 246
     36a:	ff 4d       	sbci	r31, 0xDF	; 223
     36c:	80 81       	ld	r24, Z
     36e:	89 83       	std	Y+1, r24	; 0x01
	*(temp + 1) = TBL_SBOX[*(temp + 1)];
     370:	ea 81       	ldd	r30, Y+2	; 0x02
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	e6 5f       	subi	r30, 0xF6	; 246
     376:	ff 4d       	sbci	r31, 0xDF	; 223
     378:	80 81       	ld	r24, Z
     37a:	8a 83       	std	Y+2, r24	; 0x02
	*(temp + 2) = TBL_SBOX[*(temp + 2)];
     37c:	eb 81       	ldd	r30, Y+3	; 0x03
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	e6 5f       	subi	r30, 0xF6	; 246
     382:	ff 4d       	sbci	r31, 0xDF	; 223
     384:	80 81       	ld	r24, Z
     386:	8b 83       	std	Y+3, r24	; 0x03
	*(temp + 3) = TBL_SBOX[*(temp + 3)];
     388:	ec 81       	ldd	r30, Y+4	; 0x04
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	e6 5f       	subi	r30, 0xF6	; 246
     38e:	ff 4d       	sbci	r31, 0xDF	; 223
     390:	80 81       	ld	r24, Z
     392:	8c 83       	std	Y+4, r24	; 0x04
	byte2word(temp, input);
     394:	b8 01       	movw	r22, r16
     396:	ce 01       	movw	r24, r28
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	uint32_t data2 = *input;
     39e:	f8 01       	movw	r30, r16
     3a0:	40 81       	ld	r20, Z
     3a2:	51 81       	ldd	r21, Z+1	; 0x01
     3a4:	62 81       	ldd	r22, Z+2	; 0x02
     3a6:	73 81       	ldd	r23, Z+3	; 0x03
	*data = (*data << length) ^ (*data >> (32 - length));
     3a8:	db 01       	movw	r26, r22
     3aa:	ca 01       	movw	r24, r20
     3ac:	29 e0       	ldi	r18, 0x09	; 9
     3ae:	b6 95       	lsr	r27
     3b0:	a7 95       	ror	r26
     3b2:	97 95       	ror	r25
     3b4:	87 95       	ror	r24
     3b6:	2a 95       	dec	r18
     3b8:	d1 f7       	brne	.-12     	; 0x3ae <func_key+0x7e>
     3ba:	6a 01       	movw	r12, r20
     3bc:	7b 01       	movw	r14, r22
     3be:	37 e1       	ldi	r19, 0x17	; 23
     3c0:	cc 0c       	add	r12, r12
     3c2:	dd 1c       	adc	r13, r13
     3c4:	ee 1c       	adc	r14, r14
     3c6:	ff 1c       	adc	r15, r15
     3c8:	3a 95       	dec	r19
     3ca:	d1 f7       	brne	.-12     	; 0x3c0 <func_key+0x90>
     3cc:	8c 29       	or	r24, r12
     3ce:	9d 29       	or	r25, r13
     3d0:	ae 29       	or	r26, r14
     3d2:	bf 29       	or	r27, r15
     3d4:	6a 01       	movw	r12, r20
     3d6:	7b 01       	movw	r14, r22
     3d8:	1d e0       	ldi	r17, 0x0D	; 13
     3da:	cc 0c       	add	r12, r12
     3dc:	dd 1c       	adc	r13, r13
     3de:	ee 1c       	adc	r14, r14
     3e0:	ff 1c       	adc	r15, r15
     3e2:	1a 95       	dec	r17
     3e4:	d1 f7       	brne	.-12     	; 0x3da <func_key+0xaa>
     3e6:	4a 01       	movw	r8, r20
     3e8:	5b 01       	movw	r10, r22
     3ea:	03 e1       	ldi	r16, 0x13	; 19
     3ec:	b6 94       	lsr	r11
     3ee:	a7 94       	ror	r10
     3f0:	97 94       	ror	r9
     3f2:	87 94       	ror	r8
     3f4:	0a 95       	dec	r16
     3f6:	d1 f7       	brne	.-12     	; 0x3ec <func_key+0xbc>
     3f8:	c8 28       	or	r12, r8
     3fa:	d9 28       	or	r13, r9
     3fc:	ea 28       	or	r14, r10
     3fe:	fb 28       	or	r15, r11
	*input = (*input)^(*verse2)^(*verse3);
     400:	8c 25       	eor	r24, r12
     402:	9d 25       	eor	r25, r13
     404:	ae 25       	eor	r26, r14
     406:	bf 25       	eor	r27, r15
     408:	84 27       	eor	r24, r20
     40a:	95 27       	eor	r25, r21
     40c:	a6 27       	eor	r26, r22
     40e:	b7 27       	eor	r27, r23
     410:	80 83       	st	Z, r24
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	a2 83       	std	Z+2, r26	; 0x02
     416:	b3 83       	std	Z+3, r27	; 0x03
}
     418:	24 96       	adiw	r28, 0x04	; 4
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	df 90       	pop	r13
     42c:	cf 90       	pop	r12
     42e:	bf 90       	pop	r11
     430:	af 90       	pop	r10
     432:	9f 90       	pop	r9
     434:	8f 90       	pop	r8
     436:	08 95       	ret

00000438 <func_data>:
{
     438:	6f 92       	push	r6
     43a:	7f 92       	push	r7
     43c:	8f 92       	push	r8
     43e:	9f 92       	push	r9
     440:	af 92       	push	r10
     442:	bf 92       	push	r11
     444:	cf 92       	push	r12
     446:	df 92       	push	r13
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <func_data+0x1e>
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	8c 01       	movw	r16, r24
	uint8_t temp[4]={0x00};
     45e:	19 82       	std	Y+1, r1	; 0x01
     460:	1a 82       	std	Y+2, r1	; 0x02
     462:	1b 82       	std	Y+3, r1	; 0x03
     464:	1c 82       	std	Y+4, r1	; 0x04
	word2byte(input, temp);
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
	srand(seed);
     470:	f8 01       	movw	r30, r16
     472:	80 81       	ld	r24, Z
     474:	91 81       	ldd	r25, Z+1	; 0x01
     476:	0e 94 b3 09 	call	0x1366	; 0x1366 <srand>
	uint8_t random_number_0 = rand()%256;
     47a:	0e 94 af 09 	call	0x135e	; 0x135e <rand>
     47e:	3c 01       	movw	r6, r24
	uint8_t random_number_1 = rand()%256;
     480:	0e 94 af 09 	call	0x135e	; 0x135e <rand>
     484:	4c 01       	movw	r8, r24
	uint8_t random_number_2 = rand()%256;
     486:	0e 94 af 09 	call	0x135e	; 0x135e <rand>
     48a:	5c 01       	movw	r10, r24
	uint8_t random_number_3 = rand()%256;
     48c:	0e 94 af 09 	call	0x135e	; 0x135e <rand>
     490:	6c 01       	movw	r12, r24
	uint8_t random_number_0 = rand()%256;
     492:	e1 2c       	mov	r14, r1
     494:	ff 24       	eor	r15, r15
     496:	f3 94       	inc	r15
     498:	c3 01       	movw	r24, r6
     49a:	b7 01       	movw	r22, r14
     49c:	0e 94 fe 07 	call	0xffc	; 0xffc <__divmodhi4>
	*(temp) = masked_sbox(*(temp), random_number_0);
     4a0:	68 2f       	mov	r22, r24
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	0e 94 1d 01 	call	0x23a	; 0x23a <masked_sbox>
     4a8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t random_number_1 = rand()%256;
     4aa:	c4 01       	movw	r24, r8
     4ac:	b7 01       	movw	r22, r14
     4ae:	0e 94 fe 07 	call	0xffc	; 0xffc <__divmodhi4>
	*(temp + 1) = masked_sbox(*(temp + 1), random_number_1);
     4b2:	68 2f       	mov	r22, r24
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	0e 94 1d 01 	call	0x23a	; 0x23a <masked_sbox>
     4ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t random_number_2 = rand()%256;
     4bc:	c5 01       	movw	r24, r10
     4be:	b7 01       	movw	r22, r14
     4c0:	0e 94 fe 07 	call	0xffc	; 0xffc <__divmodhi4>
	*(temp + 2) = masked_sbox(*(temp + 2), random_number_2);
     4c4:	68 2f       	mov	r22, r24
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	0e 94 1d 01 	call	0x23a	; 0x23a <masked_sbox>
     4cc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t random_number_3 = rand()%256;
     4ce:	c6 01       	movw	r24, r12
     4d0:	b7 01       	movw	r22, r14
     4d2:	0e 94 fe 07 	call	0xffc	; 0xffc <__divmodhi4>
	*(temp + 3) = masked_sbox(*(temp + 3), random_number_3);
     4d6:	68 2f       	mov	r22, r24
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	0e 94 1d 01 	call	0x23a	; 0x23a <masked_sbox>
     4de:	8c 83       	std	Y+4, r24	; 0x04
	byte2word(temp, input);
     4e0:	b8 01       	movw	r22, r16
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	uint32_t data2=*input;
     4ea:	f8 01       	movw	r30, r16
     4ec:	40 81       	ld	r20, Z
     4ee:	51 81       	ldd	r21, Z+1	; 0x01
     4f0:	62 81       	ldd	r22, Z+2	; 0x02
     4f2:	73 81       	ldd	r23, Z+3	; 0x03
	*data = (*data << length) ^ (*data >> (32 - length));
     4f4:	db 01       	movw	r26, r22
     4f6:	ca 01       	movw	r24, r20
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	aa 1f       	adc	r26, r26
     500:	bb 1f       	adc	r27, r27
     502:	2a 95       	dec	r18
     504:	d1 f7       	brne	.-12     	; 0x4fa <func_data+0xc2>
     506:	6a 01       	movw	r12, r20
     508:	7b 01       	movw	r14, r22
     50a:	36 e1       	ldi	r19, 0x16	; 22
     50c:	f6 94       	lsr	r15
     50e:	e7 94       	ror	r14
     510:	d7 94       	ror	r13
     512:	c7 94       	ror	r12
     514:	3a 95       	dec	r19
     516:	d1 f7       	brne	.-12     	; 0x50c <func_data+0xd4>
     518:	8c 29       	or	r24, r12
     51a:	9d 29       	or	r25, r13
     51c:	ae 29       	or	r26, r14
     51e:	bf 29       	or	r27, r15
     520:	6a 01       	movw	r12, r20
     522:	7b 01       	movw	r14, r22
     524:	e2 e0       	ldi	r30, 0x02	; 2
     526:	cc 0c       	add	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	ee 1c       	adc	r14, r14
     52c:	ff 1c       	adc	r15, r15
     52e:	ea 95       	dec	r30
     530:	d1 f7       	brne	.-12     	; 0x526 <func_data+0xee>
     532:	4a 01       	movw	r8, r20
     534:	5b 01       	movw	r10, r22
     536:	fe e1       	ldi	r31, 0x1E	; 30
     538:	b6 94       	lsr	r11
     53a:	a7 94       	ror	r10
     53c:	97 94       	ror	r9
     53e:	87 94       	ror	r8
     540:	fa 95       	dec	r31
     542:	d1 f7       	brne	.-12     	; 0x538 <func_data+0x100>
     544:	c8 28       	or	r12, r8
     546:	d9 28       	or	r13, r9
     548:	ea 28       	or	r14, r10
     54a:	fb 28       	or	r15, r11
	*input=(*input)^(*verse2)^(*verse3)^(*verse4)^(*verse5);
     54c:	8c 25       	eor	r24, r12
     54e:	9d 25       	eor	r25, r13
     550:	ae 25       	eor	r26, r14
     552:	bf 25       	eor	r27, r15
     554:	84 27       	eor	r24, r20
     556:	95 27       	eor	r25, r21
     558:	a6 27       	eor	r26, r22
     55a:	b7 27       	eor	r27, r23
	*data = (*data << length) ^ (*data >> (32 - length));
     55c:	6a 01       	movw	r12, r20
     55e:	7b 01       	movw	r14, r22
     560:	2e e0       	ldi	r18, 0x0E	; 14
     562:	f6 94       	lsr	r15
     564:	e7 94       	ror	r14
     566:	d7 94       	ror	r13
     568:	c7 94       	ror	r12
     56a:	2a 95       	dec	r18
     56c:	d1 f7       	brne	.-12     	; 0x562 <func_data+0x12a>
     56e:	4a 01       	movw	r8, r20
     570:	5b 01       	movw	r10, r22
     572:	32 e1       	ldi	r19, 0x12	; 18
     574:	88 0c       	add	r8, r8
     576:	99 1c       	adc	r9, r9
     578:	aa 1c       	adc	r10, r10
     57a:	bb 1c       	adc	r11, r11
     57c:	3a 95       	dec	r19
     57e:	d1 f7       	brne	.-12     	; 0x574 <func_data+0x13c>
     580:	c8 28       	or	r12, r8
     582:	d9 28       	or	r13, r9
     584:	ea 28       	or	r14, r10
     586:	fb 28       	or	r15, r11
	*input=(*input)^(*verse2)^(*verse3)^(*verse4)^(*verse5);
     588:	8c 25       	eor	r24, r12
     58a:	9d 25       	eor	r25, r13
     58c:	ae 25       	eor	r26, r14
     58e:	bf 25       	eor	r27, r15
	*data = (*data << length) ^ (*data >> (32 - length));
     590:	f6 2f       	mov	r31, r22
     592:	67 2f       	mov	r22, r23
     594:	74 2f       	mov	r23, r20
	*input=(*input)^(*verse2)^(*verse3)^(*verse4)^(*verse5);
     596:	85 27       	eor	r24, r21
     598:	9f 27       	eor	r25, r31
     59a:	a6 27       	eor	r26, r22
     59c:	b7 27       	eor	r27, r23
     59e:	f8 01       	movw	r30, r16
     5a0:	80 83       	st	Z, r24
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	a2 83       	std	Z+2, r26	; 0x02
     5a6:	b3 83       	std	Z+3, r27	; 0x03
}
     5a8:	24 96       	adiw	r28, 0x04	; 4
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	8f 90       	pop	r8
     5c6:	7f 90       	pop	r7
     5c8:	6f 90       	pop	r6
     5ca:	08 95       	ret

000005cc <encode_fun>:
{
     5cc:	2f 92       	push	r2
     5ce:	3f 92       	push	r3
     5d0:	4f 92       	push	r4
     5d2:	5f 92       	push	r5
     5d4:	6f 92       	push	r6
     5d6:	7f 92       	push	r7
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	c3 54       	subi	r28, 0x43	; 67
     5f6:	d1 40       	sbci	r29, 0x01	; 1
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	f8 2e       	mov	r15, r24
     5fe:	6b 01       	movw	r12, r22
     600:	94 2e       	mov	r9, r20
     602:	e5 2e       	mov	r14, r21
	uint8_t* p = (uint8_t*)malloc(50);      
     604:	82 e3       	ldi	r24, 0x32	; 50
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 26 08 	call	0x104c	; 0x104c <malloc>
     60c:	5c 01       	movw	r10, r24
	uint32_t KeyTmpList[4] = { 0 };   
     60e:	8e 01       	movw	r16, r28
     610:	0f 5d       	subi	r16, 0xDF	; 223
     612:	1e 4f       	sbci	r17, 0xFE	; 254
     614:	80 e1       	ldi	r24, 0x10	; 16
     616:	d8 01       	movw	r26, r16
     618:	1d 92       	st	X+, r1
     61a:	8a 95       	dec	r24
     61c:	e9 f7       	brne	.-6      	; 0x618 <encode_fun+0x4c>
	uint32_t KeyList[36] = { 0 };    
     61e:	e1 e9       	ldi	r30, 0x91	; 145
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ec 0f       	add	r30, r28
     624:	fd 1f       	adc	r31, r29
     626:	70 96       	adiw	r30, 0x10	; 16
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	df 01       	movw	r26, r30
     62c:	1d 92       	st	X+, r1
     62e:	8a 95       	dec	r24
     630:	e9 f7       	brne	.-6      	; 0x62c <encode_fun+0x60>
	uint32_t DataList[36] = { 0 };    
     632:	80 e9       	ldi	r24, 0x90	; 144
     634:	e0 5a       	subi	r30, 0xA0	; 160
     636:	f1 09       	sbc	r31, r1
     638:	df 01       	movw	r26, r30
     63a:	1d 92       	st	X+, r1
     63c:	8a 95       	dec	r24
     63e:	e9 f7       	brne	.-6      	; 0x63a <encode_fun+0x6e>
	byte2word(key, &(KeyTmpList[0]));
     640:	b8 01       	movw	r22, r16
     642:	c6 01       	movw	r24, r12
     644:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	byte2word(key + 4, &(KeyTmpList[1]));
     648:	b8 01       	movw	r22, r16
     64a:	6c 5f       	subi	r22, 0xFC	; 252
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	c6 01       	movw	r24, r12
     650:	04 96       	adiw	r24, 0x04	; 4
     652:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	byte2word(key + 8, &(KeyTmpList[2]));
     656:	b8 01       	movw	r22, r16
     658:	68 5f       	subi	r22, 0xF8	; 248
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	c6 01       	movw	r24, r12
     65e:	08 96       	adiw	r24, 0x08	; 8
     660:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	byte2word(key + 12, &(KeyTmpList[3]));
     664:	b8 01       	movw	r22, r16
     666:	64 5f       	subi	r22, 0xF4	; 244
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	c6 01       	movw	r24, r12
     66c:	0c 96       	adiw	r24, 0x0c	; 12
     66e:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
	KeyList[0] = KeyTmpList[0] ^ TBL_SYS_PARAMS[0];
     672:	f8 01       	movw	r30, r16
     674:	80 81       	ld	r24, Z
     676:	91 81       	ldd	r25, Z+1	; 0x01
     678:	a2 81       	ldd	r26, Z+2	; 0x02
     67a:	b3 81       	ldd	r27, Z+3	; 0x03
     67c:	f6 ec       	ldi	r31, 0xC6	; 198
     67e:	8f 27       	eor	r24, r31
     680:	fa eb       	ldi	r31, 0xBA	; 186
     682:	9f 27       	eor	r25, r31
     684:	f1 eb       	ldi	r31, 0xB1	; 177
     686:	af 27       	eor	r26, r31
     688:	f3 ea       	ldi	r31, 0xA3	; 163
     68a:	bf 27       	eor	r27, r31
     68c:	cf 56       	subi	r28, 0x6F	; 111
     68e:	df 4f       	sbci	r29, 0xFF	; 255
     690:	88 83       	st	Y, r24
     692:	99 83       	std	Y+1, r25	; 0x01
     694:	aa 83       	std	Y+2, r26	; 0x02
     696:	bb 83       	std	Y+3, r27	; 0x03
     698:	c1 59       	subi	r28, 0x91	; 145
     69a:	d0 40       	sbci	r29, 0x00	; 0
	KeyList[1] = KeyTmpList[1] ^ TBL_SYS_PARAMS[1];
     69c:	f8 01       	movw	r30, r16
     69e:	84 81       	ldd	r24, Z+4	; 0x04
     6a0:	95 81       	ldd	r25, Z+5	; 0x05
     6a2:	a6 81       	ldd	r26, Z+6	; 0x06
     6a4:	b7 81       	ldd	r27, Z+7	; 0x07
     6a6:	f0 e5       	ldi	r31, 0x50	; 80
     6a8:	8f 27       	eor	r24, r31
     6aa:	f3 e3       	ldi	r31, 0x33	; 51
     6ac:	9f 27       	eor	r25, r31
     6ae:	fa ea       	ldi	r31, 0xAA	; 170
     6b0:	af 27       	eor	r26, r31
     6b2:	f6 e5       	ldi	r31, 0x56	; 86
     6b4:	bf 27       	eor	r27, r31
     6b6:	cb 56       	subi	r28, 0x6B	; 107
     6b8:	df 4f       	sbci	r29, 0xFF	; 255
     6ba:	88 83       	st	Y, r24
     6bc:	99 83       	std	Y+1, r25	; 0x01
     6be:	aa 83       	std	Y+2, r26	; 0x02
     6c0:	bb 83       	std	Y+3, r27	; 0x03
     6c2:	c5 59       	subi	r28, 0x95	; 149
     6c4:	d0 40       	sbci	r29, 0x00	; 0
	KeyList[2] = KeyTmpList[2] ^ TBL_SYS_PARAMS[2];
     6c6:	f8 01       	movw	r30, r16
     6c8:	80 85       	ldd	r24, Z+8	; 0x08
     6ca:	91 85       	ldd	r25, Z+9	; 0x09
     6cc:	a2 85       	ldd	r26, Z+10	; 0x0a
     6ce:	b3 85       	ldd	r27, Z+11	; 0x0b
     6d0:	f7 e9       	ldi	r31, 0x97	; 151
     6d2:	8f 27       	eor	r24, r31
     6d4:	f1 e9       	ldi	r31, 0x91	; 145
     6d6:	9f 27       	eor	r25, r31
     6d8:	fd e7       	ldi	r31, 0x7D	; 125
     6da:	af 27       	eor	r26, r31
     6dc:	f7 e6       	ldi	r31, 0x67	; 103
     6de:	bf 27       	eor	r27, r31
     6e0:	c7 56       	subi	r28, 0x67	; 103
     6e2:	df 4f       	sbci	r29, 0xFF	; 255
     6e4:	88 83       	st	Y, r24
     6e6:	99 83       	std	Y+1, r25	; 0x01
     6e8:	aa 83       	std	Y+2, r26	; 0x02
     6ea:	bb 83       	std	Y+3, r27	; 0x03
     6ec:	c9 59       	subi	r28, 0x99	; 153
     6ee:	d0 40       	sbci	r29, 0x00	; 0
	KeyList[3] = KeyTmpList[3] ^ TBL_SYS_PARAMS[3];
     6f0:	f8 01       	movw	r30, r16
     6f2:	84 85       	ldd	r24, Z+12	; 0x0c
     6f4:	95 85       	ldd	r25, Z+13	; 0x0d
     6f6:	a6 85       	ldd	r26, Z+14	; 0x0e
     6f8:	b7 85       	ldd	r27, Z+15	; 0x0f
     6fa:	fc ed       	ldi	r31, 0xDC	; 220
     6fc:	8f 27       	eor	r24, r31
     6fe:	f2 e2       	ldi	r31, 0x22	; 34
     700:	9f 27       	eor	r25, r31
     702:	f0 e7       	ldi	r31, 0x70	; 112
     704:	af 27       	eor	r26, r31
     706:	f2 eb       	ldi	r31, 0xB2	; 178
     708:	bf 27       	eor	r27, r31
     70a:	c3 56       	subi	r28, 0x63	; 99
     70c:	df 4f       	sbci	r29, 0xFF	; 255
     70e:	88 83       	st	Y, r24
     710:	99 83       	std	Y+1, r25	; 0x01
     712:	aa 83       	std	Y+2, r26	; 0x02
     714:	bb 83       	std	Y+3, r27	; 0x03
     716:	cd 59       	subi	r28, 0x9D	; 157
     718:	d0 40       	sbci	r29, 0x00	; 0
		*(p + i) = *(input + i);
     71a:	0f 2d       	mov	r16, r15
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	a8 01       	movw	r20, r16
     720:	69 2d       	mov	r22, r9
     722:	7e 2d       	mov	r23, r14
     724:	c5 01       	movw	r24, r10
     726:	0e 94 be 09 	call	0x137c	; 0x137c <memcpy>
		*(p + len + i) = 0;
     72a:	2f 2d       	mov	r18, r15
     72c:	2f 70       	andi	r18, 0x0F	; 15
     72e:	d2 2e       	mov	r13, r18
     730:	40 e1       	ldi	r20, 0x10	; 16
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	42 1b       	sub	r20, r18
     736:	51 09       	sbc	r21, r1
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	c5 01       	movw	r24, r10
     73e:	80 0f       	add	r24, r16
     740:	91 1f       	adc	r25, r17
     742:	0e 94 c7 09 	call	0x138e	; 0x138e <memset>
	for (j = 0; j < len / 16 + ((len % 16) ? 1 : 0); j++){
     746:	f2 94       	swap	r15
     748:	8f e0       	ldi	r24, 0x0F	; 15
     74a:	f8 22       	and	r15, r24
     74c:	4f 2c       	mov	r4, r15
     74e:	51 2c       	mov	r5, r1
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	d1 10       	cpse	r13, r1
     756:	02 c0       	rjmp	.+4      	; 0x75c <encode_fun+0x190>
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	12 01       	movw	r2, r4
     75e:	22 0e       	add	r2, r18
     760:	33 1e       	adc	r3, r19
     762:	c0 5c       	subi	r28, 0xC0	; 192
     764:	de 4f       	sbci	r29, 0xFE	; 254
     766:	28 82       	st	Y, r2
     768:	39 82       	std	Y+1, r3	; 0x01
     76a:	c0 54       	subi	r28, 0x40	; 64
     76c:	d1 40       	sbci	r29, 0x01	; 1
     76e:	09 2d       	mov	r16, r9
     770:	1e 2d       	mov	r17, r14
     772:	45 01       	movw	r8, r10
     774:	71 2c       	mov	r7, r1
     776:	61 2c       	mov	r6, r1
     778:	c0 5c       	subi	r28, 0xC0	; 192
     77a:	de 4f       	sbci	r29, 0xFE	; 254
     77c:	28 80       	ld	r2, Y
     77e:	39 80       	ldd	r3, Y+1	; 0x01
     780:	c0 54       	subi	r28, 0x40	; 64
     782:	d1 40       	sbci	r29, 0x01	; 1
     784:	26 14       	cp	r2, r6
     786:	37 04       	cpc	r3, r7
     788:	c9 f4       	brne	.+50     	; 0x7bc <encode_fun+0x1f0>
	free(p);
     78a:	c5 01       	movw	r24, r10
}
     78c:	cd 5b       	subi	r28, 0xBD	; 189
     78e:	de 4f       	sbci	r29, 0xFE	; 254
     790:	cd bf       	out	0x3d, r28	; 61
     792:	de bf       	out	0x3e, r29	; 62
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	bf 90       	pop	r11
     7a6:	af 90       	pop	r10
     7a8:	9f 90       	pop	r9
     7aa:	8f 90       	pop	r8
     7ac:	7f 90       	pop	r7
     7ae:	6f 90       	pop	r6
     7b0:	5f 90       	pop	r5
     7b2:	4f 90       	pop	r4
     7b4:	3f 90       	pop	r3
     7b6:	2f 90       	pop	r2
	free(p);
     7b8:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <free>
		byte2word(p + 16 * j, &(DataList[0]));
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	c4 01       	movw	r24, r8
     7c4:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
		byte2word(p + 16 * j + 4, &(DataList[1]));
     7c8:	be 01       	movw	r22, r28
     7ca:	6b 5f       	subi	r22, 0xFB	; 251
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	c4 01       	movw	r24, r8
     7d0:	04 96       	adiw	r24, 0x04	; 4
     7d2:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
		byte2word(p + 16 * j + 8, &(DataList[2]));
     7d6:	be 01       	movw	r22, r28
     7d8:	67 5f       	subi	r22, 0xF7	; 247
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	c4 01       	movw	r24, r8
     7de:	08 96       	adiw	r24, 0x08	; 8
     7e0:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
		byte2word(p + 16 * j + 12, &(DataList[3]));
     7e4:	be 01       	movw	r22, r28
     7e6:	63 5f       	subi	r22, 0xF3	; 243
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	c4 01       	movw	r24, r8
     7ec:	0c 96       	adiw	r24, 0x0c	; 12
     7ee:	0e 94 2a 01 	call	0x254	; 0x254 <byte2word>
		for (i = 0; i < 32; i++)
     7f2:	6e 01       	movw	r12, r28
     7f4:	21 e9       	ldi	r18, 0x91	; 145
     7f6:	c2 0e       	add	r12, r18
     7f8:	d1 1c       	adc	r13, r1
     7fa:	8a e0       	ldi	r24, 0x0A	; 10
     7fc:	91 e2       	ldi	r25, 0x21	; 33
     7fe:	c2 5c       	subi	r28, 0xC2	; 194
     800:	de 4f       	sbci	r29, 0xFE	; 254
     802:	88 83       	st	Y, r24
     804:	99 83       	std	Y+1, r25	; 0x01
     806:	ce 53       	subi	r28, 0x3E	; 62
     808:	d1 40       	sbci	r29, 0x01	; 1
     80a:	de 01       	movw	r26, r28
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	7d 01       	movw	r14, r26
		byte2word(p + 16 * j + 12, &(DataList[3]));
     810:	c3 5c       	subi	r28, 0xC3	; 195
     812:	de 4f       	sbci	r29, 0xFE	; 254
     814:	18 82       	st	Y, r1
     816:	cd 53       	subi	r28, 0x3D	; 61
     818:	d1 40       	sbci	r29, 0x01	; 1
			uint32_t interdata=KeyList[i + 1] ^ KeyList[i + 2] ^ KeyList[i + 3] ^ TBL_FIX_PARAMS[i];
     81a:	ce 5b       	subi	r28, 0xBE	; 190
     81c:	de 4f       	sbci	r29, 0xFE	; 254
     81e:	c8 82       	st	Y, r12
     820:	d9 82       	std	Y+1, r13	; 0x01
     822:	c2 54       	subi	r28, 0x42	; 66
     824:	d1 40       	sbci	r29, 0x01	; 1
     826:	c2 5c       	subi	r28, 0xC2	; 194
     828:	de 4f       	sbci	r29, 0xFE	; 254
     82a:	e8 81       	ld	r30, Y
     82c:	f9 81       	ldd	r31, Y+1	; 0x01
     82e:	ce 53       	subi	r28, 0x3E	; 62
     830:	d1 40       	sbci	r29, 0x01	; 1
     832:	41 91       	ld	r20, Z+
     834:	51 91       	ld	r21, Z+
     836:	61 91       	ld	r22, Z+
     838:	71 91       	ld	r23, Z+
     83a:	c2 5c       	subi	r28, 0xC2	; 194
     83c:	de 4f       	sbci	r29, 0xFE	; 254
     83e:	e8 83       	st	Y, r30
     840:	f9 83       	std	Y+1, r31	; 0x01
     842:	ce 53       	subi	r28, 0x3E	; 62
     844:	d1 40       	sbci	r29, 0x01	; 1
     846:	d6 01       	movw	r26, r12
     848:	14 96       	adiw	r26, 0x04	; 4
     84a:	2d 90       	ld	r2, X+
     84c:	3d 90       	ld	r3, X+
     84e:	4d 90       	ld	r4, X+
     850:	5c 90       	ld	r5, X
     852:	17 97       	sbiw	r26, 0x07	; 7
     854:	18 96       	adiw	r26, 0x08	; 8
     856:	8d 91       	ld	r24, X+
     858:	9d 91       	ld	r25, X+
     85a:	0d 90       	ld	r0, X+
     85c:	bc 91       	ld	r27, X
     85e:	a0 2d       	mov	r26, r0
     860:	82 25       	eor	r24, r2
     862:	93 25       	eor	r25, r3
     864:	a4 25       	eor	r26, r4
     866:	b5 25       	eor	r27, r5
     868:	f6 01       	movw	r30, r12
     86a:	24 84       	ldd	r2, Z+12	; 0x0c
     86c:	35 84       	ldd	r3, Z+13	; 0x0d
     86e:	46 84       	ldd	r4, Z+14	; 0x0e
     870:	57 84       	ldd	r5, Z+15	; 0x0f
     872:	82 25       	eor	r24, r2
     874:	93 25       	eor	r25, r3
     876:	a4 25       	eor	r26, r4
     878:	b5 25       	eor	r27, r5
     87a:	84 27       	eor	r24, r20
     87c:	95 27       	eor	r25, r21
     87e:	a6 27       	eor	r26, r22
     880:	b7 27       	eor	r27, r23
     882:	cb 5c       	subi	r28, 0xCB	; 203
     884:	de 4f       	sbci	r29, 0xFE	; 254
     886:	88 83       	st	Y, r24
     888:	99 83       	std	Y+1, r25	; 0x01
     88a:	aa 83       	std	Y+2, r26	; 0x02
     88c:	bb 83       	std	Y+3, r27	; 0x03
     88e:	c5 53       	subi	r28, 0x35	; 53
     890:	d1 40       	sbci	r29, 0x01	; 1
			func_key(&interdata);
     892:	ce 01       	movw	r24, r28
     894:	8b 5c       	subi	r24, 0xCB	; 203
     896:	9e 4f       	sbci	r25, 0xFE	; 254
     898:	0e 94 98 01 	call	0x330	; 0x330 <func_key>
			KeyList[i + 4] = KeyList[i] ^ interdata;
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	cf 0e       	add	r12, r31
     8a0:	d1 1c       	adc	r13, r1
     8a2:	ce 5b       	subi	r28, 0xBE	; 190
     8a4:	de 4f       	sbci	r29, 0xFE	; 254
     8a6:	a8 81       	ld	r26, Y
     8a8:	b9 81       	ldd	r27, Y+1	; 0x01
     8aa:	c2 54       	subi	r28, 0x42	; 66
     8ac:	d1 40       	sbci	r29, 0x01	; 1
     8ae:	4d 91       	ld	r20, X+
     8b0:	5d 91       	ld	r21, X+
     8b2:	6d 91       	ld	r22, X+
     8b4:	7c 91       	ld	r23, X
     8b6:	cb 5c       	subi	r28, 0xCB	; 203
     8b8:	de 4f       	sbci	r29, 0xFE	; 254
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	aa 81       	ldd	r26, Y+2	; 0x02
     8c0:	bb 81       	ldd	r27, Y+3	; 0x03
     8c2:	c5 53       	subi	r28, 0x35	; 53
     8c4:	d1 40       	sbci	r29, 0x01	; 1
     8c6:	48 27       	eor	r20, r24
     8c8:	59 27       	eor	r21, r25
     8ca:	6a 27       	eor	r22, r26
     8cc:	7b 27       	eor	r23, r27
     8ce:	f6 01       	movw	r30, r12
     8d0:	44 87       	std	Z+12, r20	; 0x0c
     8d2:	55 87       	std	Z+13, r21	; 0x0d
     8d4:	66 87       	std	Z+14, r22	; 0x0e
     8d6:	77 87       	std	Z+15, r23	; 0x0f
			uint32_t tempdata = DataList[i + 1] ^ DataList[i + 2] ^ DataList[i + 3] ^ KeyList[i + 4];
     8d8:	ce 5b       	subi	r28, 0xBE	; 190
     8da:	de 4f       	sbci	r29, 0xFE	; 254
     8dc:	e8 82       	st	Y, r14
     8de:	f9 82       	std	Y+1, r15	; 0x01
     8e0:	c2 54       	subi	r28, 0x42	; 66
     8e2:	d1 40       	sbci	r29, 0x01	; 1
     8e4:	d7 01       	movw	r26, r14
     8e6:	14 96       	adiw	r26, 0x04	; 4
     8e8:	2d 90       	ld	r2, X+
     8ea:	3d 90       	ld	r3, X+
     8ec:	4d 90       	ld	r4, X+
     8ee:	5c 90       	ld	r5, X
     8f0:	17 97       	sbiw	r26, 0x07	; 7
     8f2:	18 96       	adiw	r26, 0x08	; 8
     8f4:	8d 91       	ld	r24, X+
     8f6:	9d 91       	ld	r25, X+
     8f8:	0d 90       	ld	r0, X+
     8fa:	bc 91       	ld	r27, X
     8fc:	a0 2d       	mov	r26, r0
     8fe:	82 25       	eor	r24, r2
     900:	93 25       	eor	r25, r3
     902:	a4 25       	eor	r26, r4
     904:	b5 25       	eor	r27, r5
     906:	f7 01       	movw	r30, r14
     908:	24 84       	ldd	r2, Z+12	; 0x0c
     90a:	35 84       	ldd	r3, Z+13	; 0x0d
     90c:	46 84       	ldd	r4, Z+14	; 0x0e
     90e:	57 84       	ldd	r5, Z+15	; 0x0f
     910:	82 25       	eor	r24, r2
     912:	93 25       	eor	r25, r3
     914:	a4 25       	eor	r26, r4
     916:	b5 25       	eor	r27, r5
     918:	84 27       	eor	r24, r20
     91a:	95 27       	eor	r25, r21
     91c:	a6 27       	eor	r26, r22
     91e:	b7 27       	eor	r27, r23
     920:	cf 5c       	subi	r28, 0xCF	; 207
     922:	de 4f       	sbci	r29, 0xFE	; 254
     924:	88 83       	st	Y, r24
     926:	99 83       	std	Y+1, r25	; 0x01
     928:	aa 83       	std	Y+2, r26	; 0x02
     92a:	bb 83       	std	Y+3, r27	; 0x03
     92c:	c1 53       	subi	r28, 0x31	; 49
     92e:	d1 40       	sbci	r29, 0x01	; 1
			func_data(&tempdata, i);
     930:	c3 5c       	subi	r28, 0xC3	; 195
     932:	de 4f       	sbci	r29, 0xFE	; 254
     934:	68 81       	ld	r22, Y
     936:	cd 53       	subi	r28, 0x3D	; 61
     938:	d1 40       	sbci	r29, 0x01	; 1
     93a:	ce 01       	movw	r24, r28
     93c:	8f 5c       	subi	r24, 0xCF	; 207
     93e:	9e 4f       	sbci	r25, 0xFE	; 254
     940:	0e 94 1c 02 	call	0x438	; 0x438 <func_data>
			DataList[i + 4] = DataList[i] ^tempdata;
     944:	f4 e0       	ldi	r31, 0x04	; 4
     946:	ef 0e       	add	r14, r31
     948:	f1 1c       	adc	r15, r1
     94a:	ce 5b       	subi	r28, 0xBE	; 190
     94c:	de 4f       	sbci	r29, 0xFE	; 254
     94e:	e8 81       	ld	r30, Y
     950:	f9 81       	ldd	r31, Y+1	; 0x01
     952:	c2 54       	subi	r28, 0x42	; 66
     954:	d1 40       	sbci	r29, 0x01	; 1
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	a2 81       	ldd	r26, Z+2	; 0x02
     95c:	b3 81       	ldd	r27, Z+3	; 0x03
     95e:	cf 5c       	subi	r28, 0xCF	; 207
     960:	de 4f       	sbci	r29, 0xFE	; 254
     962:	48 81       	ld	r20, Y
     964:	59 81       	ldd	r21, Y+1	; 0x01
     966:	6a 81       	ldd	r22, Y+2	; 0x02
     968:	7b 81       	ldd	r23, Y+3	; 0x03
     96a:	c1 53       	subi	r28, 0x31	; 49
     96c:	d1 40       	sbci	r29, 0x01	; 1
     96e:	84 27       	eor	r24, r20
     970:	95 27       	eor	r25, r21
     972:	a6 27       	eor	r26, r22
     974:	b7 27       	eor	r27, r23
     976:	f7 01       	movw	r30, r14
     978:	84 87       	std	Z+12, r24	; 0x0c
     97a:	95 87       	std	Z+13, r25	; 0x0d
     97c:	a6 87       	std	Z+14, r26	; 0x0e
     97e:	b7 87       	std	Z+15, r27	; 0x0f
		for (i = 0; i < 32; i++)
     980:	c3 5c       	subi	r28, 0xC3	; 195
     982:	de 4f       	sbci	r29, 0xFE	; 254
     984:	f8 81       	ld	r31, Y
     986:	cd 53       	subi	r28, 0x3D	; 61
     988:	d1 40       	sbci	r29, 0x01	; 1
     98a:	ff 5f       	subi	r31, 0xFF	; 255
     98c:	c3 5c       	subi	r28, 0xC3	; 195
     98e:	de 4f       	sbci	r29, 0xFE	; 254
     990:	f8 83       	st	Y, r31
     992:	cd 53       	subi	r28, 0x3D	; 61
     994:	d1 40       	sbci	r29, 0x01	; 1
     996:	f0 32       	cpi	r31, 0x20	; 32
     998:	09 f0       	breq	.+2      	; 0x99c <encode_fun+0x3d0>
     99a:	3f cf       	rjmp	.-386    	; 0x81a <encode_fun+0x24e>
		word2byte(DataList+35, input + 16 * j);
     99c:	b8 01       	movw	r22, r16
     99e:	ce 01       	movw	r24, r28
     9a0:	83 57       	subi	r24, 0x73	; 115
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
		word2byte(DataList+34, input + 16 * j + 4);
     9a8:	b8 01       	movw	r22, r16
     9aa:	6c 5f       	subi	r22, 0xFC	; 252
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	ce 01       	movw	r24, r28
     9b0:	87 57       	subi	r24, 0x77	; 119
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
		word2byte(DataList+33, input + 16 * j + 8);
     9b8:	b8 01       	movw	r22, r16
     9ba:	68 5f       	subi	r22, 0xF8	; 248
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	ce 01       	movw	r24, r28
     9c0:	8b 57       	subi	r24, 0x7B	; 123
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
		word2byte(DataList+32, input + 16 * j + 12);
     9c8:	b8 01       	movw	r22, r16
     9ca:	64 5f       	subi	r22, 0xF4	; 244
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	ce 01       	movw	r24, r28
     9d0:	8f 57       	subi	r24, 0x7F	; 127
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <word2byte>
	for (j = 0; j < len / 16 + ((len % 16) ? 1 : 0); j++){
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	62 1a       	sub	r6, r18
     9dc:	72 0a       	sbc	r7, r18
     9de:	00 5f       	subi	r16, 0xF0	; 240
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	80 e1       	ldi	r24, 0x10	; 16
     9e4:	88 0e       	add	r8, r24
     9e6:	91 1c       	adc	r9, r1
     9e8:	c7 ce       	rjmp	.-626    	; 0x778 <encode_fun+0x1ac>

000009ea <get_pt>:

uint8_t get_pt(uint8_t* pt, uint8_t len)
{
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	d8 2f       	mov	r29, r24
     9f6:	c9 2f       	mov	r28, r25
     9f8:	86 2f       	mov	r24, r22
	/**********************************
	* Start user-specific code here. */
	trigger_high();
     9fa:	00 e0       	ldi	r16, 0x00	; 0
     9fc:	16 e0       	ldi	r17, 0x06	; 6
     9fe:	ff 24       	eor	r15, r15
     a00:	f3 94       	inc	r15
     a02:	f8 01       	movw	r30, r16
     a04:	f5 82       	std	Z+5, r15	; 0x05
	//16 hex bytes held in 'pt' were sent
	//from the computer. Store your response
	//back into 'pt', which will send 16 bytes
	//back to computer. Can ignore of course if
	//not needed
   encode_fun(len,key,pt);
     a06:	4d 2f       	mov	r20, r29
     a08:	59 2f       	mov	r21, r25
     a0a:	6a ea       	ldi	r22, 0xAA	; 170
     a0c:	71 e2       	ldi	r23, 0x21	; 33
     a0e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <encode_fun>
	trigger_low();
     a12:	f8 01       	movw	r30, r16
     a14:	f6 82       	std	Z+6, r15	; 0x06
	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
     a16:	4d 2f       	mov	r20, r29
     a18:	5c 2f       	mov	r21, r28
     a1a:	60 e1       	ldi	r22, 0x10	; 16
     a1c:	82 e7       	ldi	r24, 0x72	; 114
     a1e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <simpleserial_put>
	return 0x00;
}
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	08 95       	ret

00000a30 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	08 95       	ret

00000a34 <ss_crc>:
{
     a34:	28 2f       	mov	r18, r24
	uint8_t crc = 0x00;
     a36:	80 e0       	ldi	r24, 0x00	; 0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
     a38:	4d e4       	ldi	r20, 0x4D	; 77
	while (len--) {
     a3a:	61 50       	subi	r22, 0x01	; 1
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <ss_crc+0xc>
}
     a3e:	08 95       	ret
		crc ^= *buf++;
     a40:	e2 2f       	mov	r30, r18
     a42:	f9 2f       	mov	r31, r25
     a44:	91 91       	ld	r25, Z+
     a46:	89 27       	eor	r24, r25
     a48:	28 e0       	ldi	r18, 0x08	; 8
     a4a:	30 e0       	ldi	r19, 0x00	; 0
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
     a4c:	87 ff       	sbrs	r24, 7
     a4e:	08 c0       	rjmp	.+16     	; 0xa60 <ss_crc+0x2c>
     a50:	88 0f       	add	r24, r24
     a52:	84 27       	eor	r24, r20
		for (k = 0; k < 8; k++) {
     a54:	21 50       	subi	r18, 0x01	; 1
     a56:	31 09       	sbc	r19, r1
     a58:	c9 f7       	brne	.-14     	; 0xa4c <ss_crc+0x18>
		crc ^= *buf++;
     a5a:	2e 2f       	mov	r18, r30
     a5c:	9f 2f       	mov	r25, r31
     a5e:	ed cf       	rjmp	.-38     	; 0xa3a <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
     a60:	88 0f       	add	r24, r24
     a62:	f8 cf       	rjmp	.-16     	; 0xa54 <ss_crc+0x20>

00000a64 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
     a64:	9c 01       	movw	r18, r24
     a66:	fa 01       	movw	r30, r20
	for(int i = 0; i < len; i++)
     a68:	db 01       	movw	r26, r22
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	42 17       	cp	r20, r18
     a70:	53 07       	cpc	r21, r19
     a72:	1c f0       	brlt	.+6      	; 0xa7a <hex_decode+0x16>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	08 95       	ret
		char n_hi = ascii_buf[2*i];
     a7a:	8c 91       	ld	r24, X
		char n_lo = ascii_buf[2*i+1];
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	9c 91       	ld	r25, X
     a80:	11 97       	sbiw	r26, 0x01	; 1
		if(n_lo >= '0' && n_lo <= '9')
     a82:	60 ed       	ldi	r22, 0xD0	; 208
     a84:	69 0f       	add	r22, r25
     a86:	6a 30       	cpi	r22, 0x0A	; 10
     a88:	78 f4       	brcc	.+30     	; 0xaa8 <hex_decode+0x44>
			data_buf[i] = n_lo - '0';
     a8a:	60 83       	st	Z, r22
		if(n_hi >= '0' && n_hi <= '9')
     a8c:	90 ed       	ldi	r25, 0xD0	; 208
     a8e:	98 0f       	add	r25, r24
     a90:	9a 30       	cpi	r25, 0x0A	; 10
     a92:	d0 f4       	brcc	.+52     	; 0xac8 <hex_decode+0x64>
			data_buf[i] |= (n_hi - '0') << 4;
     a94:	82 95       	swap	r24
     a96:	80 7f       	andi	r24, 0xF0	; 240
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
     a98:	90 81       	ld	r25, Z
     a9a:	89 2b       	or	r24, r25
     a9c:	80 83       	st	Z, r24
	for(int i = 0; i < len; i++)
     a9e:	4f 5f       	subi	r20, 0xFF	; 255
     aa0:	5f 4f       	sbci	r21, 0xFF	; 255
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	e3 cf       	rjmp	.-58     	; 0xa6e <hex_decode+0xa>
		else if(n_lo >= 'A' && n_lo <= 'F')
     aa8:	6f eb       	ldi	r22, 0xBF	; 191
     aaa:	69 0f       	add	r22, r25
     aac:	66 30       	cpi	r22, 0x06	; 6
     aae:	18 f4       	brcc	.+6      	; 0xab6 <hex_decode+0x52>
			data_buf[i] = n_lo - 'A' + 10;
     ab0:	97 53       	subi	r25, 0x37	; 55
			data_buf[i] = n_lo - 'a' + 10;
     ab2:	90 83       	st	Z, r25
     ab4:	eb cf       	rjmp	.-42     	; 0xa8c <hex_decode+0x28>
		else if(n_lo >= 'a' && n_lo <= 'f')
     ab6:	6f e9       	ldi	r22, 0x9F	; 159
     ab8:	69 0f       	add	r22, r25
     aba:	66 30       	cpi	r22, 0x06	; 6
     abc:	18 f0       	brcs	.+6      	; 0xac4 <hex_decode+0x60>
			return 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	08 95       	ret
			data_buf[i] = n_lo - 'a' + 10;
     ac4:	97 55       	subi	r25, 0x57	; 87
     ac6:	f5 cf       	rjmp	.-22     	; 0xab2 <hex_decode+0x4e>
		else if(n_hi >= 'A' && n_hi <= 'F')
     ac8:	9f eb       	ldi	r25, 0xBF	; 191
     aca:	98 0f       	add	r25, r24
     acc:	96 30       	cpi	r25, 0x06	; 6
     ace:	40 f4       	brcc	.+16     	; 0xae0 <hex_decode+0x7c>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
     ad0:	87 53       	subi	r24, 0x37	; 55
     ad2:	99 0b       	sbc	r25, r25
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
     ad4:	64 e0       	ldi	r22, 0x04	; 4
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	6a 95       	dec	r22
     adc:	e1 f7       	brne	.-8      	; 0xad6 <hex_decode+0x72>
     ade:	dc cf       	rjmp	.-72     	; 0xa98 <hex_decode+0x34>
		else if(n_hi >= 'a' && n_hi <= 'f')
     ae0:	9f e9       	ldi	r25, 0x9F	; 159
     ae2:	98 0f       	add	r25, r24
     ae4:	96 30       	cpi	r25, 0x06	; 6
     ae6:	58 f7       	brcc	.-42     	; 0xabe <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
     ae8:	87 55       	subi	r24, 0x57	; 87
     aea:	99 0b       	sbc	r25, r25
     aec:	f3 cf       	rjmp	.-26     	; 0xad4 <hex_decode+0x70>

00000aee <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
     aee:	db 01       	movw	r26, r22
	if(num_commands >= MAX_SS_CMDS)
     af0:	60 91 1a 22 	lds	r22, 0x221A	; 0x80221a <num_commands>
     af4:	70 91 1b 22 	lds	r23, 0x221B	; 0x80221b <num_commands+0x1>
     af8:	60 31       	cpi	r22, 0x10	; 16
     afa:	71 05       	cpc	r23, r1
     afc:	dc f4       	brge	.+54     	; 0xb34 <simpleserial_addcmd_flags+0x46>
		return 1;

	if(len >= MAX_SS_LEN)
     afe:	af 3f       	cpi	r26, 0xFF	; 255
     b00:	b1 05       	cpc	r27, r1
     b02:	09 f0       	breq	.+2      	; 0xb06 <simpleserial_addcmd_flags+0x18>
     b04:	b8 f4       	brcc	.+46     	; 0xb34 <simpleserial_addcmd_flags+0x46>
		return 1;

	commands[num_commands].c   = c;
     b06:	96 e0       	ldi	r25, 0x06	; 6
     b08:	96 9f       	mul	r25, r22
     b0a:	f0 01       	movw	r30, r0
     b0c:	97 9f       	mul	r25, r23
     b0e:	f0 0d       	add	r31, r0
     b10:	11 24       	eor	r1, r1
     b12:	e6 54       	subi	r30, 0x46	; 70
     b14:	fe 4d       	sbci	r31, 0xDE	; 222
     b16:	80 83       	st	Z, r24
	commands[num_commands].len = len;
     b18:	a1 83       	std	Z+1, r26	; 0x01
     b1a:	b2 83       	std	Z+2, r27	; 0x02
	commands[num_commands].fp  = fp;
     b1c:	43 83       	std	Z+3, r20	; 0x03
     b1e:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
     b20:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
     b22:	6f 5f       	subi	r22, 0xFF	; 255
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	60 93 1a 22 	sts	0x221A, r22	; 0x80221a <num_commands>
     b2a:	70 93 1b 22 	sts	0x221B, r23	; 0x80221b <num_commands+0x1>

	return 0;
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	08 95       	ret
		return 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
}
     b38:	08 95       	ret

00000b3a <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	0c 94 77 05 	jmp	0xaee	; 0xaee <simpleserial_addcmd_flags>

00000b40 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
     b40:	48 e1       	ldi	r20, 0x18	; 24
     b42:	55 e0       	ldi	r21, 0x05	; 5
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	86 e7       	ldi	r24, 0x76	; 118
     b4a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
     b4e:	48 ef       	ldi	r20, 0xF8	; 248
     b50:	55 e0       	ldi	r21, 0x05	; 5
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	87 e7       	ldi	r24, 0x77	; 119
     b58:	0e 94 9d 05 	call	0xb3a	; 0xb3a <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
     b5c:	44 ee       	ldi	r20, 0xE4	; 228
     b5e:	55 e0       	ldi	r21, 0x05	; 5
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	89 e7       	ldi	r24, 0x79	; 121
     b66:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <simpleserial_addcmd>

00000b6a <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	16 2f       	mov	r17, r22
     b76:	f4 2e       	mov	r15, r20
     b78:	05 2f       	mov	r16, r21
	// Write first character
	putch(c);
     b7a:	0e 94 39 07 	call	0xe72	; 0xe72 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
     b7e:	cf 2d       	mov	r28, r15
     b80:	d0 2f       	mov	r29, r16
     b82:	ce 01       	movw	r24, r28
     b84:	81 0f       	add	r24, r17
     b86:	91 1d       	adc	r25, r1
     b88:	8c 01       	movw	r16, r24
     b8a:	c0 17       	cp	r28, r16
     b8c:	d1 07       	cpc	r29, r17
     b8e:	41 f4       	brne	.+16     	; 0xba0 <simpleserial_put+0x36>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
     b90:	8a e0       	ldi	r24, 0x0A	; 10
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
	putch('\n');
     b9c:	0c 94 39 07 	jmp	0xe72	; 0xe72 <output_ch_0>
		putch(hex_lookup[output[i] >> 4 ]);
     ba0:	e9 91       	ld	r30, Y+
     ba2:	e2 95       	swap	r30
     ba4:	ef 70       	andi	r30, 0x0F	; 15
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e6 56       	subi	r30, 0x66	; 102
     baa:	fe 4d       	sbci	r31, 0xDE	; 222
     bac:	80 81       	ld	r24, Z
     bae:	0e 94 39 07 	call	0xe72	; 0xe72 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
     bb2:	fe 01       	movw	r30, r28
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	e0 81       	ld	r30, Z
     bb8:	ef 70       	andi	r30, 0x0F	; 15
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	e6 56       	subi	r30, 0x66	; 102
     bbe:	fe 4d       	sbci	r31, 0xDE	; 222
     bc0:	80 81       	ld	r24, Z
     bc2:	0e 94 39 07 	call	0xe72	; 0xe72 <output_ch_0>
	for(int i = 0; i < size; i++)
     bc6:	e1 cf       	rjmp	.-62     	; 0xb8a <simpleserial_put+0x20>

00000bc8 <ss_num_commands>:
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
     bd2:	80 91 1a 22 	lds	r24, 0x221A	; 0x80221a <num_commands>
     bd6:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
     bd8:	ae 01       	movw	r20, r28
     bda:	4f 5f       	subi	r20, 0xFF	; 255
     bdc:	5f 4f       	sbci	r21, 0xFF	; 255
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	82 e7       	ldi	r24, 0x72	; 114
     be2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <simpleserial_put>
}
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <ss_get_commands>:
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	e0 97       	sbiw	r28, 0x30	; 48
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
     bfe:	20 91 1a 22 	lds	r18, 0x221A	; 0x80221a <num_commands>
     c02:	30 91 1b 22 	lds	r19, 0x221B	; 0x80221b <num_commands+0x1>
     c06:	b9 01       	movw	r22, r18
     c08:	77 27       	eor	r23, r23
     c0a:	40 e0       	ldi	r20, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
     c0c:	56 e0       	ldi	r21, 0x06	; 6
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
     c0e:	84 2f       	mov	r24, r20
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	86 17       	cp	r24, r22
     c14:	97 07       	cpc	r25, r23
     c16:	84 f0       	brlt	.+32     	; 0xc38 <ss_get_commands+0x48>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
     c18:	62 2f       	mov	r22, r18
     c1a:	66 0f       	add	r22, r22
     c1c:	62 0f       	add	r22, r18
     c1e:	ae 01       	movw	r20, r28
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	82 e7       	ldi	r24, 0x72	; 114
     c26:	0e 94 b5 05 	call	0xb6a	; 0xb6a <simpleserial_put>
}
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	e0 96       	adiw	r28, 0x30	; 48
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret
        repr_cmd_buf[i].c = commands[i].c;
     c38:	fc 01       	movw	r30, r24
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	e8 0f       	add	r30, r24
     c40:	f9 1f       	adc	r31, r25
     c42:	a1 e0       	ldi	r26, 0x01	; 1
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ac 0f       	add	r26, r28
     c48:	bd 1f       	adc	r27, r29
     c4a:	ea 0f       	add	r30, r26
     c4c:	fb 1f       	adc	r31, r27
     c4e:	58 9f       	mul	r21, r24
     c50:	d0 01       	movw	r26, r0
     c52:	59 9f       	mul	r21, r25
     c54:	b0 0d       	add	r27, r0
     c56:	11 24       	eor	r1, r1
     c58:	a6 54       	subi	r26, 0x46	; 70
     c5a:	be 4d       	sbci	r27, 0xDE	; 222
     c5c:	8c 91       	ld	r24, X
     c5e:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
     c60:	11 96       	adiw	r26, 0x01	; 1
     c62:	8c 91       	ld	r24, X
     c64:	11 97       	sbiw	r26, 0x01	; 1
     c66:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
     c68:	15 96       	adiw	r26, 0x05	; 5
     c6a:	8c 91       	ld	r24, X
     c6c:	82 83       	std	Z+2, r24	; 0x02
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	ce cf       	rjmp	.-100    	; 0xc0e <ss_get_commands+0x1e>

00000c72 <simpleserial_get>:
{
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	c1 50       	subi	r28, 0x01	; 1
     c8c:	d3 40       	sbci	r29, 0x03	; 3
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
	c = getch();
     c92:	0e 94 32 07 	call	0xe64	; 0xe64 <input_ch_0>
	for(cmd = 0; cmd < num_commands; cmd++)
     c96:	40 91 1a 22 	lds	r20, 0x221A	; 0x80221a <num_commands>
     c9a:	50 91 1b 22 	lds	r21, 0x221B	; 0x80221b <num_commands+0x1>
     c9e:	2a eb       	ldi	r18, 0xBA	; 186
     ca0:	31 e2       	ldi	r19, 0x21	; 33
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	04 17       	cp	r16, r20
     ca8:	15 07       	cpc	r17, r21
     caa:	0c f4       	brge	.+2      	; 0xcae <simpleserial_get+0x3c>
     cac:	8e c0       	rjmp	.+284    	; 0xdca <simpleserial_get+0x158>
	if(cmd == num_commands)
     cae:	40 17       	cp	r20, r16
     cb0:	51 07       	cpc	r21, r17
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <simpleserial_get+0x44>
     cb4:	7b c0       	rjmp	.+246    	; 0xdac <simpleserial_get+0x13a>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
     cb6:	26 e0       	ldi	r18, 0x06	; 6
     cb8:	20 9f       	mul	r18, r16
     cba:	c0 01       	movw	r24, r0
     cbc:	21 9f       	mul	r18, r17
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	9c 01       	movw	r18, r24
     cc4:	26 54       	subi	r18, 0x46	; 70
     cc6:	3e 4d       	sbci	r19, 0xDE	; 222
     cc8:	79 01       	movw	r14, r18
     cca:	d9 01       	movw	r26, r18
     ccc:	15 96       	adiw	r26, 0x05	; 5
     cce:	8c 91       	ld	r24, X
     cd0:	80 ff       	sbrs	r24, 0
     cd2:	21 c0       	rjmp	.+66     	; 0xd16 <simpleserial_get+0xa4>
		uint8_t l = 0;
     cd4:	cf 5f       	subi	r28, 0xFF	; 255
     cd6:	dd 4f       	sbci	r29, 0xFD	; 253
     cd8:	18 82       	st	Y, r1
     cda:	c1 50       	subi	r28, 0x01	; 1
     cdc:	d2 40       	sbci	r29, 0x02	; 2
		buff[0] = getch();
     cde:	0e 94 32 07 	call	0xe64	; 0xe64 <input_ch_0>
     ce2:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
     ce4:	0e 94 32 07 	call	0xe64	; 0xe64 <input_ch_0>
     ce8:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
     cea:	ae 01       	movw	r20, r28
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	5d 4f       	sbci	r21, 0xFD	; 253
     cf0:	be 01       	movw	r22, r28
     cf2:	6f 5f       	subi	r22, 0xFF	; 255
     cf4:	7f 4f       	sbci	r23, 0xFF	; 255
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 32 05 	call	0xa64	; 0xa64 <hex_decode>
     cfe:	89 2b       	or	r24, r25
     d00:	09 f0       	breq	.+2      	; 0xd04 <simpleserial_get+0x92>
     d02:	54 c0       	rjmp	.+168    	; 0xdac <simpleserial_get+0x13a>
		commands[cmd].len = l;
     d04:	cf 5f       	subi	r28, 0xFF	; 255
     d06:	dd 4f       	sbci	r29, 0xFD	; 253
     d08:	88 81       	ld	r24, Y
     d0a:	c1 50       	subi	r28, 0x01	; 1
     d0c:	d2 40       	sbci	r29, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	f7 01       	movw	r30, r14
     d12:	81 83       	std	Z+1, r24	; 0x01
     d14:	92 83       	std	Z+2, r25	; 0x02
     d16:	9e 01       	movw	r18, r28
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	59 01       	movw	r10, r18
	for(cmd = 0; cmd < num_commands; cmd++)
     d1e:	f1 2c       	mov	r15, r1
     d20:	e1 2c       	mov	r14, r1
	for(int i = 0; i < 2*commands[cmd].len; i++)
     d22:	26 e0       	ldi	r18, 0x06	; 6
     d24:	20 9f       	mul	r18, r16
     d26:	c0 01       	movw	r24, r0
     d28:	21 9f       	mul	r18, r17
     d2a:	90 0d       	add	r25, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	dc 01       	movw	r26, r24
     d30:	a5 54       	subi	r26, 0x45	; 69
     d32:	be 4d       	sbci	r27, 0xDE	; 222
     d34:	6d 01       	movw	r12, r26
     d36:	d6 01       	movw	r26, r12
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	e8 16       	cp	r14, r24
     d42:	f9 06       	cpc	r15, r25
     d44:	08 f4       	brcc	.+2      	; 0xd48 <simpleserial_get+0xd6>
     d46:	4c c0       	rjmp	.+152    	; 0xde0 <simpleserial_get+0x16e>
	c = getch();
     d48:	0e 94 32 07 	call	0xe64	; 0xe64 <input_ch_0>
	if(c != '\n' && c != '\r')
     d4c:	8a 30       	cpi	r24, 0x0A	; 10
     d4e:	11 f0       	breq	.+4      	; 0xd54 <simpleserial_get+0xe2>
     d50:	8d 30       	cpi	r24, 0x0D	; 13
     d52:	61 f5       	brne	.+88     	; 0xdac <simpleserial_get+0x13a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
     d54:	26 e0       	ldi	r18, 0x06	; 6
     d56:	20 9f       	mul	r18, r16
     d58:	c0 01       	movw	r24, r0
     d5a:	21 9f       	mul	r18, r17
     d5c:	90 0d       	add	r25, r0
     d5e:	11 24       	eor	r1, r1
     d60:	8c 01       	movw	r16, r24
     d62:	06 54       	subi	r16, 0x46	; 70
     d64:	1e 4d       	sbci	r17, 0xDE	; 222
     d66:	f8 01       	movw	r30, r16
     d68:	f1 80       	ldd	r15, Z+1	; 0x01
     d6a:	ae 01       	movw	r20, r28
     d6c:	4f 5f       	subi	r20, 0xFF	; 255
     d6e:	5d 4f       	sbci	r21, 0xFD	; 253
     d70:	be 01       	movw	r22, r28
     d72:	6f 5f       	subi	r22, 0xFF	; 255
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 2d       	mov	r24, r15
     d78:	92 81       	ldd	r25, Z+2	; 0x02
     d7a:	0e 94 32 05 	call	0xa64	; 0xa64 <hex_decode>
     d7e:	89 2b       	or	r24, r25
     d80:	a9 f4       	brne	.+42     	; 0xdac <simpleserial_get+0x13a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
     d82:	d8 01       	movw	r26, r16
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	ed 91       	ld	r30, X+
     d88:	fc 91       	ld	r31, X
     d8a:	6f 2d       	mov	r22, r15
     d8c:	ce 01       	movw	r24, r28
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	9d 4f       	sbci	r25, 0xFD	; 253
     d92:	19 95       	eicall
     d94:	cf 5f       	subi	r28, 0xFF	; 255
     d96:	dc 4f       	sbci	r29, 0xFC	; 252
     d98:	88 83       	st	Y, r24
     d9a:	c1 50       	subi	r28, 0x01	; 1
     d9c:	d3 40       	sbci	r29, 0x03	; 3
	simpleserial_put('z', 1, ret);
     d9e:	ae 01       	movw	r20, r28
     da0:	4f 5f       	subi	r20, 0xFF	; 255
     da2:	5c 4f       	sbci	r21, 0xFC	; 252
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	8a e7       	ldi	r24, 0x7A	; 122
     da8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <simpleserial_put>
}
     dac:	cf 5f       	subi	r28, 0xFF	; 255
     dae:	dc 4f       	sbci	r29, 0xFC	; 252
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	08 95       	ret
		if(commands[cmd].c == c)
     dca:	2a 5f       	subi	r18, 0xFA	; 250
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	f9 01       	movw	r30, r18
     dd0:	36 97       	sbiw	r30, 0x06	; 6
     dd2:	90 81       	ld	r25, Z
     dd4:	98 17       	cp	r25, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <simpleserial_get+0x168>
     dd8:	6e cf       	rjmp	.-292    	; 0xcb6 <simpleserial_get+0x44>
	for(cmd = 0; cmd < num_commands; cmd++)
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	63 cf       	rjmp	.-314    	; 0xca6 <simpleserial_get+0x34>
		c = getch();
     de0:	0e 94 32 07 	call	0xe64	; 0xe64 <input_ch_0>
		if(c == '\n' || c == '\r')
     de4:	8a 30       	cpi	r24, 0x0A	; 10
     de6:	11 f3       	breq	.-60     	; 0xdac <simpleserial_get+0x13a>
     de8:	8d 30       	cpi	r24, 0x0D	; 13
     dea:	01 f3       	breq	.-64     	; 0xdac <simpleserial_get+0x13a>
		ascii_buf[i] = c;
     dec:	f5 01       	movw	r30, r10
     dee:	81 93       	st	Z+, r24
     df0:	5f 01       	movw	r10, r30
	for(int i = 0; i < 2*commands[cmd].len; i++)
     df2:	ff ef       	ldi	r31, 0xFF	; 255
     df4:	ef 1a       	sub	r14, r31
     df6:	ff 0a       	sbc	r15, r31
     df8:	9e cf       	rjmp	.-196    	; 0xd36 <simpleserial_get+0xc4>

00000dfa <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
     dfa:	e0 e4       	ldi	r30, 0x40	; 64
     dfc:	f6 e0       	ldi	r31, 0x06	; 6
     dfe:	88 e0       	ldi	r24, 0x08	; 8
     e00:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     e06:	e0 ea       	ldi	r30, 0xA0	; 160
     e08:	f8 e0       	ldi	r31, 0x08	; 8
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_1
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
     e0e:	8b e0       	ldi	r24, 0x0B	; 11
     e10:	86 83       	std	Z+6, r24	; 0x06
     e12:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
     e14:	84 81       	ldd	r24, Z+4	; 0x04
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
     e1a:	84 81       	ldd	r24, Z+4	; 0x04
     e1c:	88 60       	ori	r24, 0x08	; 8
     e1e:	84 83       	std	Z+4, r24	; 0x04
   }
     e20:	08 95       	ret

00000e22 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	0f 92       	push	r0
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	fc 01       	movw	r30, r24
     e30:	69 83       	std	Y+1, r22	; 0x01
     e32:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	80 e0       	ldi	r24, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	3a 81       	ldd	r19, Y+2	; 0x02
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	11 f4       	brne	.+4      	; 0xe46 <input_ch_w_timeout_0+0x24>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <input_ch_w_timeout_0+0x34>
		if (USART_IsRXComplete(&USART))
     e46:	20 91 a1 08 	lds	r18, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     e4a:	27 ff       	sbrs	r18, 7
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <input_ch_w_timeout_0+0x3e>
			*data = USART_GetChar(&USART);
     e4e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     e52:	80 83       	st	Z, r24
			return BYTE_REC;
     e54:	81 e0       	ldi	r24, 0x01	; 1
	}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret
		timeout_counter++;
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	ea cf       	rjmp	.-44     	; 0xe38 <input_ch_w_timeout_0+0x16>

00000e64 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
     e64:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     e68:	87 ff       	sbrs	r24, 7
     e6a:	fc cf       	rjmp	.-8      	; 0xe64 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
     e6c:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
     e70:	08 95       	ret

00000e72 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
     e72:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
     e76:	95 ff       	sbrs	r25, 5
     e78:	fc cf       	rjmp	.-8      	; 0xe72 <output_ch_0>
	USART_PutChar(&USART, data);
     e7a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	return;
     e7e:	08 95       	ret

00000e80 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     e80:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     e82:	60 83       	st	Z, r22
     e84:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     e86:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     e88:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
     e8a:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
     e8c:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
     e8e:	15 86       	std	Z+13, r1	; 0x0d
}
     e90:	08 95       	ret

00000e92 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     e92:	fc 01       	movw	r30, r24
     e94:	62 83       	std	Z+2, r22	; 0x02
}
     e96:	08 95       	ret

00000e98 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
     e98:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     e9a:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     e9c:	26 85       	ldd	r18, Z+14	; 0x0e
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     e9e:	9f 5f       	subi	r25, 0xFF	; 255
     ea0:	93 70       	andi	r25, 0x03	; 3

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	92 13       	cpse	r25, r18
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <USART_TXBuffer_FreeSpace+0x12>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
}
     eaa:	08 95       	ret

00000eac <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
     eb4:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     eb6:	0e 94 4c 07 	call	0xe98	; 0xe98 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     eba:	88 23       	and	r24, r24
     ebc:	79 f0       	breq	.+30     	; 0xedc <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     ebe:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
     ec0:	fe 01       	movw	r30, r28
     ec2:	e9 0f       	add	r30, r25
     ec4:	f1 1d       	adc	r31, r1
     ec6:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     ec8:	9f 5f       	subi	r25, 0xFF	; 255
     eca:	93 70       	andi	r25, 0x03	; 3
     ecc:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     ece:	e8 81       	ld	r30, Y
     ed0:	f9 81       	ldd	r31, Y+1	; 0x01
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     ed4:	9c 7f       	andi	r25, 0xFC	; 252
     ed6:	2a 81       	ldd	r18, Y+2	; 0x02
     ed8:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     eda:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	08 95       	ret

00000ee4 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
     ee4:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     ee6:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     ee8:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	29 13       	cpse	r18, r25
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <USART_RXBufferData_Available+0xe>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
}
     ef2:	08 95       	ret

00000ef4 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     ef4:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     ef6:	84 85       	ldd	r24, Z+12	; 0x0c
     ef8:	df 01       	movw	r26, r30
     efa:	a8 0f       	add	r26, r24
     efc:	b1 1d       	adc	r27, r1
     efe:	13 96       	adiw	r26, 0x03	; 3
     f00:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     f02:	94 85       	ldd	r25, Z+12	; 0x0c
     f04:	9f 5f       	subi	r25, 0xFF	; 255
     f06:	93 70       	andi	r25, 0x03	; 3
     f08:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
     f0a:	08 95       	ret

00000f0c <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     f0c:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     f0e:	83 85       	ldd	r24, Z+11	; 0x0b
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     f14:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
     f16:	a0 81       	ld	r26, Z
     f18:	b1 81       	ldd	r27, Z+1	; 0x01
     f1a:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
     f1c:	82 17       	cp	r24, r18
     f1e:	49 f0       	breq	.+18     	; 0xf32 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     f20:	23 85       	ldd	r18, Z+11	; 0x0b
     f22:	df 01       	movw	r26, r30
     f24:	a2 0f       	add	r26, r18
     f26:	b1 1d       	adc	r27, r1
     f28:	13 96       	adiw	r26, 0x03	; 3
     f2a:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
     f2c:	83 87       	std	Z+11, r24	; 0x0b
		ans = true;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	08 95       	ret
	  	ans = false;
     f32:	80 e0       	ldi	r24, 0x00	; 0
	}
	return ans;
}
     f34:	08 95       	ret

00000f36 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     f3c:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
     f3e:	95 85       	ldd	r25, Z+13	; 0x0d
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     f40:	a0 81       	ld	r26, Z
     f42:	b1 81       	ldd	r27, Z+1	; 0x01
	if (bufPtr->TX_Head == tempTX_Tail){
     f44:	98 13       	cpse	r25, r24
     f46:	09 c0       	rjmp	.+18     	; 0xf5a <USART_DataRegEmpty+0x24>
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	8c 91       	ld	r24, X
     f4c:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     f4e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     f50:	13 96       	adiw	r26, 0x03	; 3
     f52:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     f5a:	86 85       	ldd	r24, Z+14	; 0x0e
     f5c:	ef 01       	movw	r28, r30
     f5e:	c8 0f       	add	r28, r24
     f60:	d1 1d       	adc	r29, r1
     f62:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
     f64:	8c 93       	st	X, r24
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     f66:	86 85       	ldd	r24, Z+14	; 0x0e
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	83 70       	andi	r24, 0x03	; 3
     f6c:	86 87       	std	Z+14, r24	; 0x0e
}
     f6e:	f2 cf       	rjmp	.-28     	; 0xf54 <USART_DataRegEmpty+0x1e>

00000f70 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
     f70:	fc 01       	movw	r30, r24
     f72:	cb 01       	movw	r24, r22
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
     f74:	24 81       	ldd	r18, Z+4	; 0x04
	if(data & 0x0100) {
     f76:	70 ff       	sbrs	r23, 0
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <USART_NineBits_PutChar+0x12>
		usart->CTRLB |= USART_TXB8_bm;
     f7a:	21 60       	ori	r18, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
     f7c:	24 83       	std	Z+4, r18	; 0x04
	}

	usart->DATA = (data & 0x00FF);
     f7e:	80 83       	st	Z, r24
}
     f80:	08 95       	ret
		usart->CTRLB &= ~USART_TXB8_bm;
     f82:	2e 7f       	andi	r18, 0xFE	; 254
     f84:	fb cf       	rjmp	.-10     	; 0xf7c <USART_NineBits_PutChar+0xc>

00000f86 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
     f86:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	80 ff       	sbrs	r24, 0
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
     f8e:	80 81       	ld	r24, Z
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	91 60       	ori	r25, 0x01	; 1
     f94:	08 95       	ret
	}else {
		return(usart->DATA);
     f96:	80 81       	ld	r24, Z
     f98:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     f9a:	08 95       	ret

00000f9c <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
     f9c:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
    OSC.PLLCTRL = 0x00;
     fa0:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
    OSC.CTRL |= OSC_XOSCEN_bm;
     fa4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
     fae:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     fb2:	83 ff       	sbrs	r24, 3
     fb4:	fc cf       	rjmp	.-8      	; 0xfae <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
     fb6:	88 ed       	ldi	r24, 0xD8	; 216
     fb8:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
     fc6:	08 95       	ret

00000fc8 <main>:
int main(void)
{
   platform_init();
     fc8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <platform_init>
	init_uart();
     fcc:	0e 94 fd 06 	call	0xdfa	; 0xdfa <init_uart0>
	trigger_setup();
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	putch('l');
	putch('o');
	putch('\n');
	*/

	simpleserial_init();
     fd6:	0e 94 a0 05 	call	0xb40	; 0xb40 <simpleserial_init>

	simpleserial_addcmd('k', 16, get_key);
     fda:	41 e1       	ldi	r20, 0x11	; 17
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	60 e1       	ldi	r22, 0x10	; 16
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	8b e6       	ldi	r24, 0x6B	; 107
     fe4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <simpleserial_addcmd>
	simpleserial_addcmd('p', 16, get_pt);
     fe8:	45 ef       	ldi	r20, 0xF5	; 245
     fea:	54 e0       	ldi	r21, 0x04	; 4
     fec:	60 e1       	ldi	r22, 0x10	; 16
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	80 e7       	ldi	r24, 0x70	; 112
     ff2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <simpleserial_addcmd>

	while(1)
		simpleserial_get();
     ff6:	0e 94 39 06 	call	0xc72	; 0xc72 <simpleserial_get>
	while(1)
     ffa:	fd cf       	rjmp	.-6      	; 0xff6 <main+0x2e>

00000ffc <__divmodhi4>:
     ffc:	97 fb       	bst	r25, 7
     ffe:	07 2e       	mov	r0, r23
    1000:	16 f4       	brtc	.+4      	; 0x1006 <__divmodhi4+0xa>
    1002:	00 94       	com	r0
    1004:	07 d0       	rcall	.+14     	; 0x1014 <__divmodhi4_neg1>
    1006:	77 fd       	sbrc	r23, 7
    1008:	09 d0       	rcall	.+18     	; 0x101c <__divmodhi4_neg2>
    100a:	0e 94 12 08 	call	0x1024	; 0x1024 <__udivmodhi4>
    100e:	07 fc       	sbrc	r0, 7
    1010:	05 d0       	rcall	.+10     	; 0x101c <__divmodhi4_neg2>
    1012:	3e f4       	brtc	.+14     	; 0x1022 <__divmodhi4_exit>

00001014 <__divmodhi4_neg1>:
    1014:	90 95       	com	r25
    1016:	81 95       	neg	r24
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__divmodhi4_neg2>:
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255

00001022 <__divmodhi4_exit>:
    1022:	08 95       	ret

00001024 <__udivmodhi4>:
    1024:	aa 1b       	sub	r26, r26
    1026:	bb 1b       	sub	r27, r27
    1028:	51 e1       	ldi	r21, 0x11	; 17
    102a:	07 c0       	rjmp	.+14     	; 0x103a <__udivmodhi4_ep>

0000102c <__udivmodhi4_loop>:
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	a6 17       	cp	r26, r22
    1032:	b7 07       	cpc	r27, r23
    1034:	10 f0       	brcs	.+4      	; 0x103a <__udivmodhi4_ep>
    1036:	a6 1b       	sub	r26, r22
    1038:	b7 0b       	sbc	r27, r23

0000103a <__udivmodhi4_ep>:
    103a:	88 1f       	adc	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	5a 95       	dec	r21
    1040:	a9 f7       	brne	.-22     	; 0x102c <__udivmodhi4_loop>
    1042:	80 95       	com	r24
    1044:	90 95       	com	r25
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	08 95       	ret

0000104c <malloc>:
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	9c 01       	movw	r18, r24
    1056:	02 97       	sbiw	r24, 0x02	; 2
    1058:	10 f4       	brcc	.+4      	; 0x105e <malloc+0x12>
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <__flp>
    1062:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <__flp+0x1>
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	30 97       	sbiw	r30, 0x00	; 0
    1070:	91 f4       	brne	.+36     	; 0x1096 <malloc+0x4a>
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	09 f4       	brne	.+2      	; 0x1078 <malloc+0x2c>
    1076:	45 c0       	rjmp	.+138    	; 0x1102 <malloc+0xb6>
    1078:	82 1b       	sub	r24, r18
    107a:	93 0b       	sbc	r25, r19
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	91 05       	cpc	r25, r1
    1080:	b8 f5       	brcc	.+110    	; 0x10f0 <malloc+0xa4>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	61 15       	cp	r22, r1
    1088:	71 05       	cpc	r23, r1
    108a:	69 f1       	breq	.+90     	; 0x10e6 <malloc+0x9a>
    108c:	fb 01       	movw	r30, r22
    108e:	82 83       	std	Z+2, r24	; 0x02
    1090:	93 83       	std	Z+3, r25	; 0x03
    1092:	fe 01       	movw	r30, r28
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <malloc+0x6c>
    1096:	40 81       	ld	r20, Z
    1098:	51 81       	ldd	r21, Z+1	; 0x01
    109a:	02 81       	ldd	r16, Z+2	; 0x02
    109c:	13 81       	ldd	r17, Z+3	; 0x03
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	f0 f0       	brcs	.+60     	; 0x10e0 <malloc+0x94>
    10a4:	42 17       	cp	r20, r18
    10a6:	53 07       	cpc	r21, r19
    10a8:	99 f4       	brne	.+38     	; 0x10d0 <malloc+0x84>
    10aa:	10 97       	sbiw	r26, 0x00	; 0
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <malloc+0x7a>
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	0c 93       	st	X, r16
    10b2:	12 97       	sbiw	r26, 0x02	; 2
    10b4:	13 96       	adiw	r26, 0x03	; 3
    10b6:	1c 93       	st	X, r17
    10b8:	32 96       	adiw	r30, 0x02	; 2
    10ba:	cf 01       	movw	r24, r30
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret
    10c6:	00 93 1c 22 	sts	0x221C, r16	; 0x80221c <__flp>
    10ca:	10 93 1d 22 	sts	0x221D, r17	; 0x80221d <__flp+0x1>
    10ce:	f4 cf       	rjmp	.-24     	; 0x10b8 <malloc+0x6c>
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	19 f0       	breq	.+6      	; 0x10da <malloc+0x8e>
    10d4:	48 17       	cp	r20, r24
    10d6:	59 07       	cpc	r21, r25
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <malloc+0x94>
    10da:	ca 01       	movw	r24, r20
    10dc:	bd 01       	movw	r22, r26
    10de:	ef 01       	movw	r28, r30
    10e0:	df 01       	movw	r26, r30
    10e2:	f8 01       	movw	r30, r16
    10e4:	c4 cf       	rjmp	.-120    	; 0x106e <malloc+0x22>
    10e6:	80 93 1c 22 	sts	0x221C, r24	; 0x80221c <__flp>
    10ea:	90 93 1d 22 	sts	0x221D, r25	; 0x80221d <__flp+0x1>
    10ee:	d1 cf       	rjmp	.-94     	; 0x1092 <malloc+0x46>
    10f0:	fe 01       	movw	r30, r28
    10f2:	e8 0f       	add	r30, r24
    10f4:	f9 1f       	adc	r31, r25
    10f6:	21 93       	st	Z+, r18
    10f8:	31 93       	st	Z+, r19
    10fa:	02 97       	sbiw	r24, 0x02	; 2
    10fc:	88 83       	st	Y, r24
    10fe:	99 83       	std	Y+1, r25	; 0x01
    1100:	dc cf       	rjmp	.-72     	; 0x10ba <malloc+0x6e>
    1102:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <__brkval>
    1106:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <__brkval+0x1>
    110a:	89 2b       	or	r24, r25
    110c:	41 f4       	brne	.+16     	; 0x111e <malloc+0xd2>
    110e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <__malloc_heap_start>
    1112:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1116:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <__brkval>
    111a:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <__brkval+0x1>
    111e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__malloc_heap_end>
    1122:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__malloc_heap_end+0x1>
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	41 f4       	brne	.+16     	; 0x113a <malloc+0xee>
    112a:	8d b7       	in	r24, 0x3d	; 61
    112c:	9e b7       	in	r25, 0x3e	; 62
    112e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1132:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1136:	84 1b       	sub	r24, r20
    1138:	95 0b       	sbc	r25, r21
    113a:	40 91 1e 22 	lds	r20, 0x221E	; 0x80221e <__brkval>
    113e:	50 91 1f 22 	lds	r21, 0x221F	; 0x80221f <__brkval+0x1>
    1142:	48 17       	cp	r20, r24
    1144:	59 07       	cpc	r21, r25
    1146:	08 f0       	brcs	.+2      	; 0x114a <malloc+0xfe>
    1148:	b8 cf       	rjmp	.-144    	; 0x10ba <malloc+0x6e>
    114a:	84 1b       	sub	r24, r20
    114c:	95 0b       	sbc	r25, r21
    114e:	82 17       	cp	r24, r18
    1150:	93 07       	cpc	r25, r19
    1152:	08 f4       	brcc	.+2      	; 0x1156 <malloc+0x10a>
    1154:	b2 cf       	rjmp	.-156    	; 0x10ba <malloc+0x6e>
    1156:	b9 01       	movw	r22, r18
    1158:	6e 5f       	subi	r22, 0xFE	; 254
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	86 17       	cp	r24, r22
    115e:	97 07       	cpc	r25, r23
    1160:	08 f4       	brcc	.+2      	; 0x1164 <malloc+0x118>
    1162:	ab cf       	rjmp	.-170    	; 0x10ba <malloc+0x6e>
    1164:	64 0f       	add	r22, r20
    1166:	75 1f       	adc	r23, r21
    1168:	60 93 1e 22 	sts	0x221E, r22	; 0x80221e <__brkval>
    116c:	70 93 1f 22 	sts	0x221F, r23	; 0x80221f <__brkval+0x1>
    1170:	fa 01       	movw	r30, r20
    1172:	21 93       	st	Z+, r18
    1174:	31 93       	st	Z+, r19
    1176:	a1 cf       	rjmp	.-190    	; 0x10ba <malloc+0x6e>

00001178 <free>:
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	9c 01       	movw	r18, r24
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	e9 f0       	breq	.+58     	; 0x11bc <free+0x44>
    1182:	fc 01       	movw	r30, r24
    1184:	32 97       	sbiw	r30, 0x02	; 2
    1186:	12 82       	std	Z+2, r1	; 0x02
    1188:	13 82       	std	Z+3, r1	; 0x03
    118a:	c0 91 1c 22 	lds	r28, 0x221C	; 0x80221c <__flp>
    118e:	d0 91 1d 22 	lds	r29, 0x221D	; 0x80221d <__flp+0x1>
    1192:	de 01       	movw	r26, r28
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	20 97       	sbiw	r28, 0x00	; 0
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <free+0x4c>
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	28 0f       	add	r18, r24
    11a2:	39 1f       	adc	r19, r25
    11a4:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <__brkval>
    11a8:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <__brkval+0x1>
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <free+0x3c>
    11b2:	67 c0       	rjmp	.+206    	; 0x1282 <free+0x10a>
    11b4:	e0 93 1e 22 	sts	0x221E, r30	; 0x80221e <__brkval>
    11b8:	f0 93 1f 22 	sts	0x221F, r31	; 0x80221f <__brkval+0x1>
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret
    11c2:	da 01       	movw	r26, r20
    11c4:	ae 17       	cp	r26, r30
    11c6:	bf 07       	cpc	r27, r31
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <free+0x54>
    11ca:	41 c0       	rjmp	.+130    	; 0x124e <free+0xd6>
    11cc:	12 96       	adiw	r26, 0x02	; 2
    11ce:	4d 91       	ld	r20, X+
    11d0:	5c 91       	ld	r21, X
    11d2:	13 97       	sbiw	r26, 0x03	; 3
    11d4:	cd 01       	movw	r24, r26
    11d6:	41 15       	cp	r20, r1
    11d8:	51 05       	cpc	r21, r1
    11da:	99 f7       	brne	.-26     	; 0x11c2 <free+0x4a>
    11dc:	dc 01       	movw	r26, r24
    11de:	12 96       	adiw	r26, 0x02	; 2
    11e0:	ed 93       	st	X+, r30
    11e2:	fc 93       	st	X, r31
    11e4:	13 97       	sbiw	r26, 0x03	; 3
    11e6:	4d 91       	ld	r20, X+
    11e8:	5d 91       	ld	r21, X+
    11ea:	a4 0f       	add	r26, r20
    11ec:	b5 1f       	adc	r27, r21
    11ee:	ea 17       	cp	r30, r26
    11f0:	fb 07       	cpc	r31, r27
    11f2:	81 f4       	brne	.+32     	; 0x1214 <free+0x9c>
    11f4:	20 81       	ld	r18, Z
    11f6:	31 81       	ldd	r19, Z+1	; 0x01
    11f8:	2e 5f       	subi	r18, 0xFE	; 254
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	24 0f       	add	r18, r20
    11fe:	35 1f       	adc	r19, r21
    1200:	dc 01       	movw	r26, r24
    1202:	2d 93       	st	X+, r18
    1204:	3c 93       	st	X, r19
    1206:	11 97       	sbiw	r26, 0x01	; 1
    1208:	22 81       	ldd	r18, Z+2	; 0x02
    120a:	33 81       	ldd	r19, Z+3	; 0x03
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	2d 93       	st	X+, r18
    1210:	3c 93       	st	X, r19
    1212:	13 97       	sbiw	r26, 0x03	; 3
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	b1 f5       	brne	.+108    	; 0x128c <free+0x114>
    1220:	fe 01       	movw	r30, r28
    1222:	81 91       	ld	r24, Z+
    1224:	91 91       	ld	r25, Z+
    1226:	e8 0f       	add	r30, r24
    1228:	f9 1f       	adc	r31, r25
    122a:	80 91 1e 22 	lds	r24, 0x221E	; 0x80221e <__brkval>
    122e:	90 91 1f 22 	lds	r25, 0x221F	; 0x80221f <__brkval+0x1>
    1232:	8e 17       	cp	r24, r30
    1234:	9f 07       	cpc	r25, r31
    1236:	11 f6       	brne	.-124    	; 0x11bc <free+0x44>
    1238:	10 97       	sbiw	r26, 0x00	; 0
    123a:	59 f5       	brne	.+86     	; 0x1292 <free+0x11a>
    123c:	10 92 1c 22 	sts	0x221C, r1	; 0x80221c <__flp>
    1240:	10 92 1d 22 	sts	0x221D, r1	; 0x80221d <__flp+0x1>
    1244:	c0 93 1e 22 	sts	0x221E, r28	; 0x80221e <__brkval>
    1248:	d0 93 1f 22 	sts	0x221F, r29	; 0x80221f <__brkval+0x1>
    124c:	b7 cf       	rjmp	.-146    	; 0x11bc <free+0x44>
    124e:	a2 83       	std	Z+2, r26	; 0x02
    1250:	b3 83       	std	Z+3, r27	; 0x03
    1252:	40 81       	ld	r20, Z
    1254:	51 81       	ldd	r21, Z+1	; 0x01
    1256:	24 0f       	add	r18, r20
    1258:	35 1f       	adc	r19, r21
    125a:	a2 17       	cp	r26, r18
    125c:	b3 07       	cpc	r27, r19
    125e:	71 f4       	brne	.+28     	; 0x127c <free+0x104>
    1260:	4e 5f       	subi	r20, 0xFE	; 254
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	2d 91       	ld	r18, X+
    1266:	3c 91       	ld	r19, X
    1268:	11 97       	sbiw	r26, 0x01	; 1
    126a:	24 0f       	add	r18, r20
    126c:	35 1f       	adc	r19, r21
    126e:	20 83       	st	Z, r18
    1270:	31 83       	std	Z+1, r19	; 0x01
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	2d 91       	ld	r18, X+
    1276:	3c 91       	ld	r19, X
    1278:	22 83       	std	Z+2, r18	; 0x02
    127a:	33 83       	std	Z+3, r19	; 0x03
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <free+0x10a>
    1280:	ad cf       	rjmp	.-166    	; 0x11dc <free+0x64>
    1282:	e0 93 1c 22 	sts	0x221C, r30	; 0x80221c <__flp>
    1286:	f0 93 1d 22 	sts	0x221D, r31	; 0x80221d <__flp+0x1>
    128a:	98 cf       	rjmp	.-208    	; 0x11bc <free+0x44>
    128c:	de 01       	movw	r26, r28
    128e:	ec 01       	movw	r28, r24
    1290:	c3 cf       	rjmp	.-122    	; 0x1218 <free+0xa0>
    1292:	12 96       	adiw	r26, 0x02	; 2
    1294:	1d 92       	st	X+, r1
    1296:	1c 92       	st	X, r1
    1298:	13 97       	sbiw	r26, 0x03	; 3
    129a:	d4 cf       	rjmp	.-88     	; 0x1244 <free+0xcc>

0000129c <do_rand>:
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	2a 97       	sbiw	r28, 0x0a	; 10
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	89 87       	std	Y+9, r24	; 0x09
    12b4:	9a 87       	std	Y+10, r25	; 0x0a
    12b6:	a9 85       	ldd	r26, Y+9	; 0x09
    12b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    12ba:	2d 91       	ld	r18, X+
    12bc:	3d 91       	ld	r19, X+
    12be:	4d 91       	ld	r20, X+
    12c0:	5c 91       	ld	r21, X
    12c2:	29 83       	std	Y+1, r18	; 0x01
    12c4:	3a 83       	std	Y+2, r19	; 0x02
    12c6:	4b 83       	std	Y+3, r20	; 0x03
    12c8:	5c 83       	std	Y+4, r21	; 0x04
    12ca:	23 2b       	or	r18, r19
    12cc:	24 2b       	or	r18, r20
    12ce:	25 2b       	or	r18, r21
    12d0:	41 f4       	brne	.+16     	; 0x12e2 <do_rand+0x46>
    12d2:	24 e2       	ldi	r18, 0x24	; 36
    12d4:	39 ed       	ldi	r19, 0xD9	; 217
    12d6:	4b e5       	ldi	r20, 0x5B	; 91
    12d8:	57 e0       	ldi	r21, 0x07	; 7
    12da:	29 83       	std	Y+1, r18	; 0x01
    12dc:	3a 83       	std	Y+2, r19	; 0x02
    12de:	4b 83       	std	Y+3, r20	; 0x03
    12e0:	5c 83       	std	Y+4, r21	; 0x04
    12e2:	69 81       	ldd	r22, Y+1	; 0x01
    12e4:	7a 81       	ldd	r23, Y+2	; 0x02
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	2d e1       	ldi	r18, 0x1D	; 29
    12ec:	33 ef       	ldi	r19, 0xF3	; 243
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	0e 94 ce 09 	call	0x139c	; 0x139c <__divmodsi4>
    12f6:	69 01       	movw	r12, r18
    12f8:	7a 01       	movw	r14, r20
    12fa:	a7 ea       	ldi	r26, 0xA7	; 167
    12fc:	b1 e4       	ldi	r27, 0x41	; 65
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	0e 94 ed 09 	call	0x13da	; 0x13da <__muluhisi3>
    1306:	69 83       	std	Y+1, r22	; 0x01
    1308:	7a 83       	std	Y+2, r23	; 0x02
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	ac ee       	ldi	r26, 0xEC	; 236
    1310:	b4 ef       	ldi	r27, 0xF4	; 244
    1312:	a7 01       	movw	r20, r14
    1314:	96 01       	movw	r18, r12
    1316:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__mulohisi3>
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	ab 81       	ldd	r26, Y+3	; 0x03
    1324:	bc 81       	ldd	r27, Y+4	; 0x04
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	a4 1f       	adc	r26, r20
    132c:	b5 1f       	adc	r27, r21
    132e:	b7 ff       	sbrs	r27, 7
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <do_rand+0x9c>
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	a1 09       	sbc	r26, r1
    1336:	b0 48       	sbci	r27, 0x80	; 128
    1338:	e9 85       	ldd	r30, Y+9	; 0x09
    133a:	fa 85       	ldd	r31, Y+10	; 0x0a
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
    1344:	9f 77       	andi	r25, 0x7F	; 127
    1346:	2a 96       	adiw	r28, 0x0a	; 10
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	08 95       	ret

0000135a <rand_r>:
    135a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <do_rand>

0000135e <rand>:
    135e:	86 e0       	ldi	r24, 0x06	; 6
    1360:	90 e2       	ldi	r25, 0x20	; 32
    1362:	0c 94 4e 09 	jmp	0x129c	; 0x129c <do_rand>

00001366 <srand>:
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	a0 e0       	ldi	r26, 0x00	; 0
    136a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <next>
    136e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <next+0x1>
    1372:	a0 93 08 20 	sts	0x2008, r26	; 0x802008 <next+0x2>
    1376:	b0 93 09 20 	sts	0x2009, r27	; 0x802009 <next+0x3>
    137a:	08 95       	ret

0000137c <memcpy>:
    137c:	fb 01       	movw	r30, r22
    137e:	dc 01       	movw	r26, r24
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <memcpy+0xa>
    1382:	01 90       	ld	r0, Z+
    1384:	0d 92       	st	X+, r0
    1386:	41 50       	subi	r20, 0x01	; 1
    1388:	50 40       	sbci	r21, 0x00	; 0
    138a:	d8 f7       	brcc	.-10     	; 0x1382 <memcpy+0x6>
    138c:	08 95       	ret

0000138e <memset>:
    138e:	dc 01       	movw	r26, r24
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <memset+0x6>
    1392:	6d 93       	st	X+, r22
    1394:	41 50       	subi	r20, 0x01	; 1
    1396:	50 40       	sbci	r21, 0x00	; 0
    1398:	e0 f7       	brcc	.-8      	; 0x1392 <memset+0x4>
    139a:	08 95       	ret

0000139c <__divmodsi4>:
    139c:	05 2e       	mov	r0, r21
    139e:	97 fb       	bst	r25, 7
    13a0:	1e f4       	brtc	.+6      	; 0x13a8 <__divmodsi4+0xc>
    13a2:	00 94       	com	r0
    13a4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__negsi2>
    13a8:	57 fd       	sbrc	r21, 7
    13aa:	07 d0       	rcall	.+14     	; 0x13ba <__divmodsi4_neg2>
    13ac:	0e 94 00 0a 	call	0x1400	; 0x1400 <__udivmodsi4>
    13b0:	07 fc       	sbrc	r0, 7
    13b2:	03 d0       	rcall	.+6      	; 0x13ba <__divmodsi4_neg2>
    13b4:	4e f4       	brtc	.+18     	; 0x13c8 <__divmodsi4_exit>
    13b6:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__negsi2>

000013ba <__divmodsi4_neg2>:
    13ba:	50 95       	com	r21
    13bc:	40 95       	com	r20
    13be:	30 95       	com	r19
    13c0:	21 95       	neg	r18
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	4f 4f       	sbci	r20, 0xFF	; 255
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255

000013c8 <__divmodsi4_exit>:
    13c8:	08 95       	ret

000013ca <__negsi2>:
    13ca:	90 95       	com	r25
    13cc:	80 95       	com	r24
    13ce:	70 95       	com	r23
    13d0:	61 95       	neg	r22
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	08 95       	ret

000013da <__muluhisi3>:
    13da:	0e 94 22 0a 	call	0x1444	; 0x1444 <__umulhisi3>
    13de:	a5 9f       	mul	r26, r21
    13e0:	90 0d       	add	r25, r0
    13e2:	b4 9f       	mul	r27, r20
    13e4:	90 0d       	add	r25, r0
    13e6:	a4 9f       	mul	r26, r20
    13e8:	80 0d       	add	r24, r0
    13ea:	91 1d       	adc	r25, r1
    13ec:	11 24       	eor	r1, r1
    13ee:	08 95       	ret

000013f0 <__mulshisi3>:
    13f0:	b7 ff       	sbrs	r27, 7
    13f2:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__muluhisi3>

000013f6 <__mulohisi3>:
    13f6:	0e 94 ed 09 	call	0x13da	; 0x13da <__muluhisi3>
    13fa:	82 1b       	sub	r24, r18
    13fc:	93 0b       	sbc	r25, r19
    13fe:	08 95       	ret

00001400 <__udivmodsi4>:
    1400:	a1 e2       	ldi	r26, 0x21	; 33
    1402:	1a 2e       	mov	r1, r26
    1404:	aa 1b       	sub	r26, r26
    1406:	bb 1b       	sub	r27, r27
    1408:	fd 01       	movw	r30, r26
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <__udivmodsi4_ep>

0000140c <__udivmodsi4_loop>:
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	ee 1f       	adc	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	a2 17       	cp	r26, r18
    1416:	b3 07       	cpc	r27, r19
    1418:	e4 07       	cpc	r30, r20
    141a:	f5 07       	cpc	r31, r21
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__udivmodsi4_ep>
    141e:	a2 1b       	sub	r26, r18
    1420:	b3 0b       	sbc	r27, r19
    1422:	e4 0b       	sbc	r30, r20
    1424:	f5 0b       	sbc	r31, r21

00001426 <__udivmodsi4_ep>:
    1426:	66 1f       	adc	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	1a 94       	dec	r1
    1430:	69 f7       	brne	.-38     	; 0x140c <__udivmodsi4_loop>
    1432:	60 95       	com	r22
    1434:	70 95       	com	r23
    1436:	80 95       	com	r24
    1438:	90 95       	com	r25
    143a:	9b 01       	movw	r18, r22
    143c:	ac 01       	movw	r20, r24
    143e:	bd 01       	movw	r22, r26
    1440:	cf 01       	movw	r24, r30
    1442:	08 95       	ret

00001444 <__umulhisi3>:
    1444:	a2 9f       	mul	r26, r18
    1446:	b0 01       	movw	r22, r0
    1448:	b3 9f       	mul	r27, r19
    144a:	c0 01       	movw	r24, r0
    144c:	a3 9f       	mul	r26, r19
    144e:	70 0d       	add	r23, r0
    1450:	81 1d       	adc	r24, r1
    1452:	11 24       	eor	r1, r1
    1454:	91 1d       	adc	r25, r1
    1456:	b2 9f       	mul	r27, r18
    1458:	70 0d       	add	r23, r0
    145a:	81 1d       	adc	r24, r1
    145c:	11 24       	eor	r1, r1
    145e:	91 1d       	adc	r25, r1
    1460:	08 95       	ret

00001462 <_exit>:
    1462:	f8 94       	cli

00001464 <__stop_program>:
    1464:	ff cf       	rjmp	.-2      	; 0x1464 <__stop_program>
